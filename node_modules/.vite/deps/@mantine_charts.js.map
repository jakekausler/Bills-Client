{
  "version": 3,
  "sources": ["../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/utils/get-series-labels/get-series-labels.ts", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/esm/ChartTooltip/ChartTooltip.module.css.mjs", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/ChartTooltip/ChartTooltip.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/esm/ChartLegend/ChartLegend.module.css.mjs", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/ChartLegend/ChartLegend.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/PointLabel/PointLabel.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/AreaChart/AreaGradient.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/AreaChart/AreaSplit.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/AreaChart/get-split-offset.ts", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/esm/grid-chart.module.css.mjs", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/AreaChart/AreaChart.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/BarChart/BarChart.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/LineChart/LineChart.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/Sparkline/Sparkline.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/esm/DonutChart/DonutChart.module.css.mjs", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/DonutChart/DonutChart.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/esm/PieChart/PieChart.module.css.mjs", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/PieChart/PieChart.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/esm/RadarChart/RadarChart.module.css.mjs", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/RadarChart/RadarChart.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/ScatterChart/ScatterChart.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/BubbleChart/BubbleChart.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/CompositeChart/CompositeChart.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/esm/RadialBarChart/RadialBarChart.module.css.mjs", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/RadialBarChart/RadialBarChart.tsx", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/esm/FunnelChart/FunnelChart.module.css.mjs", "../../.deno/@mantine+charts@7.15.2/node_modules/@mantine/charts/src/FunnelChart/FunnelChart.tsx"],
  "sourcesContent": ["import { ChartSeries } from '../../types';\n\ntype ChartSeriesLabels = Record<string, string | undefined>;\n\nexport function getSeriesLabels(series: ChartSeries[] | undefined): ChartSeriesLabels {\n  if (!series) {\n    return {};\n  }\n\n  return series.reduce<ChartSeriesLabels>((acc, item) => {\n    const matchFound = item.name.search(/\\./);\n    if (matchFound >= 0) {\n      const key = item.name.substring(matchFound + 1);\n      acc[key] = item.label;\n      return acc;\n    }\n    acc[item.name] = item.label;\n    return acc;\n  }, {});\n}\n", "'use client';\nvar classes = {\"tooltip\":\"m_e4d36c9b\",\"tooltipLabel\":\"m_7f4bcb19\",\"tooltipBody\":\"m_3de554dd\",\"tooltipItemColor\":\"m_b30369b5\",\"tooltipItem\":\"m_3de8964e\",\"tooltipItemBody\":\"m_50186d10\",\"tooltipItemName\":\"m_501dadf9\",\"tooltipItemData\":\"m_50192318\"};\n\nexport { classes as default };\n//# sourceMappingURL=ChartTooltip.module.css.mjs.map\n", "import {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { ChartSeries } from '../types';\nimport { getSeriesLabels } from '../utils';\nimport classes from './ChartTooltip.module.css';\n\nfunction updateChartTooltipPayload(payload: Record<string, any>[]): Record<string, any>[] {\n  return payload.map((item) => {\n    if (!item.payload || item.payload[item.name]) {\n      return item;\n    }\n    const matchFound = item.name.search(/\\./);\n    if (matchFound >= 0) {\n      const newDataKey = item.name.substring(0, matchFound);\n      const nestedPayload = { ...item.payload[newDataKey] };\n      const shallowPayload = Object.entries(item.payload).reduce((acc, current) => {\n        const [k, v] = current;\n        return k === newDataKey ? acc : { ...acc, [k]: v };\n      }, {});\n\n      return {\n        ...item,\n        name: item.name.substring(matchFound + 1),\n        payload: {\n          ...shallowPayload,\n          ...nestedPayload,\n        },\n      };\n    }\n    return item;\n  });\n}\n\nexport function getFilteredChartTooltipPayload(payload: Record<string, any>[], segmentId?: string) {\n  const duplicatesFilter = updateChartTooltipPayload(\n    payload.filter((item) => item.fill !== 'none' || !item.color)\n  );\n\n  if (!segmentId) {\n    return duplicatesFilter;\n  }\n\n  return duplicatesFilter.filter((item) => item.name === segmentId);\n}\n\nfunction getData(item: Record<string, any>, type: 'area' | 'radial' | 'scatter') {\n  if (type === 'radial' || type === 'scatter') {\n    if (Array.isArray(item.value)) {\n      return item.value[1] - item.value[0];\n    }\n    return item.value;\n  }\n\n  if (Array.isArray(item.payload[item.dataKey])) {\n    return item.payload[item.dataKey][1] - item.payload[item.dataKey][0];\n  }\n  return item.payload[item.name];\n}\n\nexport type ChartTooltipStylesNames =\n  | 'tooltip'\n  | 'tooltipItem'\n  | 'tooltipItemBody'\n  | 'tooltipItemColor'\n  | 'tooltipItemName'\n  | 'tooltipItemData'\n  | 'tooltipLabel'\n  | 'tooltipBody';\n\nexport interface ChartTooltipProps\n  extends BoxProps,\n    StylesApiProps<ChartTooltipFactory>,\n    ElementProps<'div'> {\n  /** Main tooltip label */\n  label?: React.ReactNode;\n\n  /** Chart data provided by recharts */\n  payload: Record<string, any>[] | undefined;\n\n  /** Data units, provided by parent component */\n  unit?: string;\n\n  /** Tooltip type that determines the content and styles, `area` for LineChart, AreaChart and BarChart, `radial` for DonutChart and PieChart, `'area'` by default */\n  type?: 'area' | 'radial' | 'scatter';\n\n  /** Id of the segment to display data for. Only applicable when `type=\"radial\"`. If not set, all data is rendered. */\n  segmentId?: string;\n\n  /** Chart series data, applicable only for `area` type */\n  series?: ChartSeries[];\n\n  /** A function to format values */\n  valueFormatter?: (value: number) => string;\n\n  /** Determines whether the color swatch should be visible, `true` by default */\n  showColor?: boolean;\n}\n\nexport type ChartTooltipFactory = Factory<{\n  props: ChartTooltipProps;\n  ref: HTMLDivElement;\n  stylesNames: ChartTooltipStylesNames;\n}>;\n\nconst defaultProps: Partial<ChartTooltipProps> = {\n  type: 'area',\n  showColor: true,\n};\n\nexport const ChartTooltip = factory<ChartTooltipFactory>((_props, ref) => {\n  const props = useProps('ChartTooltip', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    payload,\n    label,\n    unit,\n    type,\n    segmentId,\n    mod,\n    series,\n    valueFormatter,\n    showColor,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<ChartTooltipFactory>({\n    name: 'ChartTooltip',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  if (!payload) {\n    return null;\n  }\n\n  const filteredPayload = getFilteredChartTooltipPayload(payload, segmentId);\n  const scatterLabel = type === 'scatter' ? payload[0]?.payload?.name : null;\n  const labels = getSeriesLabels(series);\n  const _label = label || scatterLabel;\n\n  const items = filteredPayload.map((item) => (\n    <div key={item?.key ?? item.name} data-type={type} {...getStyles('tooltipItem')}>\n      <div {...getStyles('tooltipItemBody')}>\n        {showColor && (\n          <svg {...getStyles('tooltipItemColor')}>\n            <circle\n              r={6}\n              fill={getThemeColor(item.color, theme)}\n              width={12}\n              height={12}\n              cx={6}\n              cy={6}\n            />\n          </svg>\n        )}\n        <div {...getStyles('tooltipItemName')}>{labels[item.name] || item.name}</div>\n      </div>\n      <div {...getStyles('tooltipItemData')}>\n        {typeof valueFormatter === 'function'\n          ? valueFormatter(getData(item, type!))\n          : getData(item, type!)}\n        {unit || item.unit}\n      </div>\n    </div>\n  ));\n\n  return (\n    <Box {...getStyles('tooltip')} mod={[{ type }, mod]} ref={ref} {...others}>\n      {_label && <div {...getStyles('tooltipLabel')}>{_label}</div>}\n      <div {...getStyles('tooltipBody')}>{items}</div>\n    </Box>\n  );\n});\n\nChartTooltip.displayName = '@mantine/charts/ChartTooltip';\n", "'use client';\nvar classes = {\"legend\":\"m_847eaf\",\"legendItem\":\"m_17da7e62\",\"legendItemColor\":\"m_6e236e21\",\"legendItemName\":\"m_8ff56c0d\"};\n\nexport { classes as default };\n//# sourceMappingURL=ChartLegend.module.css.mjs.map\n", "import {\n  Box,\n  BoxProps,\n  ColorSwatch,\n  ElementProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { ChartSeries } from '../types';\nimport { getSeriesLabels } from '../utils';\nimport classes from './ChartLegend.module.css';\n\nfunction updateChartLegendPayload(payload: Record<string, any>[]): Record<string, any>[] {\n  return payload.map((item) => {\n    const newDataKey = item.dataKey?.split('.').pop();\n    return {\n      ...item,\n      dataKey: newDataKey,\n      payload: {\n        ...item.payload,\n        name: newDataKey,\n        dataKey: newDataKey,\n      },\n    };\n  });\n}\n\nexport function getFilteredChartLegendPayload(payload: Record<string, any>[]) {\n  return updateChartLegendPayload(payload.filter((item) => item.color !== 'none'));\n}\n\nexport type ChartLegendStylesNames = 'legendItem' | 'legendItemColor' | 'legendItemName' | 'legend';\n\nexport interface ChartLegendProps\n  extends BoxProps,\n    StylesApiProps<ChartLegendFactory>,\n    ElementProps<'div'> {\n  /** Chart data provided by recharts */\n  payload: Record<string, any>[] | undefined;\n\n  /** Function called when mouse enters/leaves one of the legend items */\n  onHighlight: (area: string | null) => void;\n\n  /** Position of the legend relative to the chart, used to apply margin on the corresponding side */\n  legendPosition: 'top' | 'bottom' | 'middle';\n\n  /** Data used for labels, only applicable for area charts: AreaChart, LineChart, BarChart */\n  series?: ChartSeries[];\n\n  /** Determines whether color swatch should be shown next to the label, `true` by default */\n  showColor?: boolean;\n\n  /** Determines whether the legend should be centered, `false` by default */\n  centered?: boolean;\n}\n\nexport type ChartLegendFactory = Factory<{\n  props: ChartLegendProps;\n  ref: HTMLDivElement;\n  stylesNames: ChartLegendStylesNames;\n}>;\n\nconst defaultProps: Partial<ChartLegendProps> = {};\n\nexport const ChartLegend = factory<ChartLegendFactory>((_props, ref) => {\n  const props = useProps('ChartLegend', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    payload,\n    onHighlight,\n    legendPosition,\n    mod,\n    series,\n    showColor,\n    centered,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<ChartLegendFactory>({\n    name: 'ChartLegend',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  if (!payload) {\n    return null;\n  }\n\n  const filteredPayload = getFilteredChartLegendPayload(payload);\n  const labels = getSeriesLabels(series);\n\n  const items = filteredPayload.map((item, index) => (\n    <div\n      key={index}\n      {...getStyles('legendItem')}\n      onMouseEnter={() => onHighlight(item.dataKey)}\n      onMouseLeave={() => onHighlight(null)}\n      data-without-color={showColor === false || undefined}\n    >\n      <ColorSwatch\n        color={item.color}\n        size={12}\n        {...getStyles('legendItemColor')}\n        withShadow={false}\n      />\n      <p {...getStyles('legendItemName')}>{labels[item.dataKey] || item.dataKey}</p>\n    </div>\n  ));\n\n  return (\n    <Box\n      ref={ref}\n      mod={[{ position: legendPosition, centered }, mod]}\n      {...getStyles('legend')}\n      {...others}\n    >\n      {items}\n    </Box>\n  );\n});\n\nChartLegend.displayName = '@mantine/charts/ChartLegend';\n", "interface PointLabelProps {\n  x?: number;\n  y?: number;\n  value?: number;\n  valueFormatter?: (value: number) => string;\n}\n\nexport function PointLabel({ x, y, value, valueFormatter }: PointLabelProps) {\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text\n        x={0}\n        y={0}\n        dy={-8}\n        dx={-10}\n        textAnchor=\"top\"\n        fill=\"var(--chart-text-color, var(--mantine-color-dimmed))\"\n        fontSize={8}\n      >\n        {valueFormatter ? valueFormatter(value!) : value}\n      </text>\n    </g>\n  );\n}\n", "interface AreaGradientProps {\n  color: string;\n  id: string;\n  withGradient: boolean | undefined;\n  fillOpacity: number | undefined;\n}\n\nexport function AreaGradient({ color, id, withGradient, fillOpacity }: AreaGradientProps) {\n  return (\n    <>\n      {withGradient ? (\n        <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"0%\" stopColor={color} stopOpacity={fillOpacity} />\n          <stop offset=\"100%\" stopColor={color} stopOpacity={0.01} />\n        </linearGradient>\n      ) : (\n        <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop stopColor={color} stopOpacity={fillOpacity ?? 0.2} />\n        </linearGradient>\n      )}\n    </>\n  );\n}\n\nAreaGradient.displayName = '@mantine/charts/AreaGradient';\n", "import { getThemeColor, MantineColor, useMantineTheme } from '@mantine/core';\n\ninterface AreaSplitProps {\n  offset: number;\n  colors: [MantineColor, MantineColor];\n  id?: string;\n  fillOpacity: number | undefined;\n}\n\nexport function AreaSplit({ offset, id, colors, fillOpacity }: AreaSplitProps) {\n  const theme = useMantineTheme();\n\n  return (\n    <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n      <stop\n        offset={offset}\n        stopColor={getThemeColor(colors[0], theme)}\n        stopOpacity={fillOpacity ?? 0.2}\n      />\n      <stop\n        offset={offset}\n        stopColor={getThemeColor(colors[1], theme)}\n        stopOpacity={fillOpacity ?? 0.2}\n      />\n    </linearGradient>\n  );\n}\n\nAreaSplit.displayName = '@mantine/charts/AreaSplit';\n", "import type { ChartData } from '../types';\nimport type { AreaChartSeries } from './AreaChart';\n\ninterface GetSplitOffsetInput {\n  data: ChartData;\n  dataKey: string;\n}\n\nexport function getSplitOffset({ data, dataKey }: GetSplitOffsetInput) {\n  const dataMax = Math.max(...data.map((item) => item[dataKey]));\n  const dataMin = Math.min(...data.map((item) => item[dataKey]));\n\n  if (dataMax <= 0) {\n    return 0;\n  }\n  if (dataMin >= 0) {\n    return 1;\n  }\n\n  return dataMax / (dataMax - dataMin);\n}\n\ninterface GetDefaultSplitOffsetInput {\n  data: ChartData;\n  series: AreaChartSeries[];\n}\n\nexport function getDefaultSplitOffset({ data, series }: GetDefaultSplitOffsetInput) {\n  if (series.length === 1) {\n    const dataKey = series[0].name;\n    return getSplitOffset({ data, dataKey });\n  }\n\n  return 0.5;\n}\n", "'use client';\nvar classes = {\"root\":\"m_a50f3e58\",\"container\":\"m_af9188cb\",\"grid\":\"m_a50a48bc\",\"axis\":\"m_a507a517\",\"axisLabel\":\"m_2293801d\",\"tooltip\":\"m_92b296cd\"};\n\nexport { classes as default };\n//# sourceMappingURL=grid-chart.module.css.mjs.map\n", "import { Fragment, useId, useState } from 'react';\nimport {\n  Area,\n  AreaProps,\n  CartesianGrid,\n  DotProps,\n  Label,\n  Legend,\n  AreaChart as ReChartsAreaChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport { PointLabel } from '../PointLabel/PointLabel';\nimport type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';\nimport { AreaGradient } from './AreaGradient';\nimport { AreaSplit } from './AreaSplit';\nimport { getDefaultSplitOffset } from './get-split-offset';\nimport classes from '../grid-chart.module.css';\n\nfunction valueToPercent(value: number) {\n  return `${(value * 100).toFixed(0)}%`;\n}\n\nexport interface AreaChartSeries extends ChartSeries {\n  strokeDasharray?: string | number;\n  color: MantineColor;\n}\n\nexport type AreaChartType = 'default' | 'stacked' | 'percent' | 'split';\n\nexport type AreaChartCurveType =\n  | 'bump'\n  | 'linear'\n  | 'natural'\n  | 'monotone'\n  | 'step'\n  | 'stepBefore'\n  | 'stepAfter';\n\nexport type AreaChartStylesNames =\n  | 'area'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type AreaChartCSSVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface AreaChartProps\n  extends BoxProps,\n    GridChartBaseProps,\n    StylesApiProps<AreaChartFactory>,\n    ElementProps<'div'> {\n  /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */\n  series: AreaChartSeries[];\n\n  /** Controls how chart areas are positioned relative to each other, `'default'` by default */\n  type?: AreaChartType;\n\n  /** Determines whether the chart area should be represented with a gradient instead of the solid color, `false` by default */\n  withGradient?: boolean;\n\n  /** Type of the curve, `'monotone'` by default */\n  curveType?: AreaChartCurveType;\n\n  /** Determines whether dots should be displayed, `true` by default */\n  withDots?: boolean;\n\n  /** Props passed down to all dots. Ignored if `withDots={false}` is set. */\n  dotProps?: Omit<DotProps, 'ref'>;\n\n  /** Props passed down to all active dots. Ignored if `withDots={false}` is set. */\n  activeDotProps?: Omit<DotProps, 'ref'>;\n\n  /** Stroke width for the chart areas, `2` by default */\n  strokeWidth?: number;\n\n  /** Props passed down to recharts `AreaChart` component */\n  areaChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsAreaChart>;\n\n  /** Controls fill opacity of all areas, `0.2` by default */\n  fillOpacity?: number;\n\n  /** A tuple of colors used when `type=\"split\"` is set, ignored in all other cases. A tuple may include theme colors reference or any valid CSS colors `['green.7', 'red.7']` by default. */\n  splitColors?: [MantineColor, MantineColor];\n\n  /** Offset for the split gradient. By default, value is inferred from `data` and `series` if possible. Must be generated from the data array with `getSplitOffset` function. */\n  splitOffset?: number;\n\n  /** Determines whether points with `null` values should be connected, `true` by default */\n  connectNulls?: boolean;\n\n  /** Additional components that are rendered inside recharts `AreaChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `Area` component */\n  areaProps?:\n    | ((series: AreaChartSeries) => Partial<Omit<AreaProps, 'ref'>>)\n    | Partial<Omit<AreaProps, 'ref'>>;\n\n  /** Determines whether each point should have associated label, `false` by default */\n  withPointLabels?: boolean;\n}\n\nexport type AreaChartFactory = Factory<{\n  props: AreaChartProps;\n  ref: HTMLDivElement;\n  stylesNames: AreaChartStylesNames;\n  vars: AreaChartCSSVariables;\n}>;\n\nconst defaultProps: Partial<AreaChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withDots: true,\n  withTooltip: true,\n  connectNulls: true,\n  strokeWidth: 2,\n  tooltipAnimationDuration: 0,\n  fillOpacity: 0.2,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  curveType: 'monotone',\n  gridAxis: 'x',\n  type: 'default',\n  splitColors: ['green.7', 'red.7'],\n  orientation: 'horizontal',\n};\n\nconst varsResolver = createVarsResolver<AreaChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const AreaChart = factory<AreaChartFactory>((_props, ref) => {\n  const props = useProps('AreaChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    series,\n    withGradient,\n    dataKey,\n    withXAxis,\n    withYAxis,\n    curveType,\n    gridProps,\n    withDots,\n    tickLine,\n    strokeDasharray,\n    gridAxis,\n    unit,\n    yAxisProps,\n    xAxisProps,\n    dotProps,\n    activeDotProps,\n    strokeWidth,\n    tooltipAnimationDuration,\n    type,\n    legendProps,\n    tooltipProps,\n    withLegend,\n    withTooltip,\n    areaChartProps,\n    fillOpacity,\n    splitColors,\n    splitOffset,\n    connectNulls,\n    onMouseLeave,\n    orientation,\n    referenceLines,\n    dir,\n    valueFormatter,\n    children,\n    areaProps,\n    xAxisLabel,\n    yAxisLabel,\n    withRightYAxis,\n    rightYAxisLabel,\n    rightYAxisProps,\n    withPointLabels,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const baseId = useId();\n  const splitId = `${baseId}-split`;\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const isAnimationActive = (tooltipAnimationDuration || 0) > 0;\n  const _withGradient = typeof withGradient === 'boolean' ? withGradient : type === 'default';\n  const stacked = type === 'stacked' || type === 'percent';\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<AreaChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<AreaChartFactory>({\n    name: 'AreaChart',\n    classes: classes as any,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const dotsAreas = series.map((item) => {\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n    return (\n      <Area\n        {...getStyles('area')}\n        activeDot={{ fill: theme.white, stroke: color, strokeWidth: 2, r: 4, ...activeDotProps }}\n        dot={{ fill: color, fillOpacity: dimmed ? 0 : 1, strokeWidth: 2, r: 4, ...dotProps }}\n        key={item.name}\n        name={item.name}\n        type={curveType}\n        dataKey={item.name}\n        fill=\"none\"\n        strokeWidth={strokeWidth}\n        stroke=\"none\"\n        isAnimationActive={false}\n        connectNulls={connectNulls}\n        stackId={stacked ? 'stack-dots' : undefined}\n        yAxisId={item.yAxisId || 'left'}\n        {...(typeof areaProps === 'function' ? areaProps(item) : areaProps)}\n      />\n    );\n  });\n\n  const areas = series.map((item) => {\n    const id = `${baseId}-${item.color.replace(/[^a-zA-Z0-9]/g, '')}`;\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n\n    return (\n      <Fragment key={item.name}>\n        <defs>\n          <AreaGradient\n            color={color}\n            withGradient={_withGradient}\n            id={id}\n            fillOpacity={fillOpacity}\n          />\n        </defs>\n        <Area\n          {...getStyles('area')}\n          activeDot={false}\n          dot={false}\n          name={item.name}\n          type={curveType}\n          dataKey={item.name}\n          fill={type === 'split' ? `url(#${splitId})` : `url(#${id})`}\n          strokeWidth={strokeWidth}\n          stroke={color}\n          isAnimationActive={false}\n          connectNulls={connectNulls}\n          stackId={stacked ? 'stack' : undefined}\n          fillOpacity={dimmed ? 0 : 1}\n          strokeOpacity={dimmed ? 0.5 : 1}\n          strokeDasharray={item.strokeDasharray}\n          yAxisId={item.yAxisId || 'left'}\n          label={withPointLabels ? <PointLabel valueFormatter={valueFormatter} /> : undefined}\n          {...(typeof areaProps === 'function' ? areaProps(item) : areaProps)}\n        />\n      </Fragment>\n    );\n  });\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        yAxisId={line.yAxisId || 'left'}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  const tickFormatter = type === 'percent' ? valueToPercent : valueFormatter;\n\n  const sharedYAxisProps = {\n    axisLine: false,\n    ...(orientation === 'vertical'\n      ? { dataKey, type: 'category' as const }\n      : { type: 'number' as const }),\n    tickLine: withYTickLine ? { stroke: 'currentColor' } : false,\n    allowDecimals: true,\n    unit,\n    tickFormatter: orientation === 'vertical' ? undefined : tickFormatter,\n    ...getStyles('axis'),\n  };\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsAreaChart\n          data={data}\n          stackOffset={type === 'percent' ? 'expand' : undefined}\n          layout={orientation}\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...areaChartProps}\n        >\n          {referenceLinesItems}\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n\n          <XAxis\n            hide={!withXAxis}\n            {...(orientation === 'vertical' ? { type: 'number' } : { dataKey })}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            tickFormatter={orientation === 'vertical' ? tickFormatter : undefined}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n\n          <YAxis\n            yAxisId=\"left\"\n            orientation=\"left\"\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withYAxis}\n            {...sharedYAxisProps}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            tick={{ transform: 'translate(10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withRightYAxis}\n            {...sharedYAxisProps}\n            {...rightYAxisProps}\n          >\n            {rightYAxisLabel && (\n              <Label\n                position=\"insideRight\"\n                angle={90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {rightYAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={isAnimationActive}\n              position={orientation === 'vertical' ? {} : { y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  label={label}\n                  payload={payload}\n                  unit={unit}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {type === 'split' && (\n            <defs>\n              <AreaSplit\n                colors={splitColors!}\n                id={splitId}\n                offset={splitOffset ?? getDefaultSplitOffset({ data: data!, series })}\n                fillOpacity={fillOpacity}\n              />\n            </defs>\n          )}\n\n          {areas}\n          {withDots && dotsAreas}\n          {children}\n        </ReChartsAreaChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nAreaChart.classes = classes;\nAreaChart.displayName = '@mantine/charts/AreaChart';\n", "import { useState } from 'react';\nimport {\n  Bar,\n  BarProps,\n  CartesianGrid,\n  Cell,\n  Label,\n  LabelList,\n  LabelListProps,\n  Legend,\n  BarChart as ReChartsBarChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';\nimport classes from '../grid-chart.module.css';\n\nfunction valueToPercent(value: number) {\n  return `${(value * 100).toFixed(0)}%`;\n}\n\nexport interface BarChartSeries extends ChartSeries {\n  stackId?: string;\n}\n\nexport type BarChartType = 'default' | 'stacked' | 'percent' | 'waterfall';\n\nexport type BarChartStylesNames =\n  | 'bar'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type BarChartCssVariables = {\n  root:\n    | '--chart-text-color'\n    | '--chart-grid-color'\n    | '--chart-cursor-fill'\n    | '--chart-bar-label-color';\n};\n\nexport interface BarChartProps\n  extends BoxProps,\n    GridChartBaseProps,\n    StylesApiProps<BarChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to display chart. */\n  data: Record<string, any>[];\n\n  /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */\n  series: BarChartSeries[];\n\n  /** Controls how bars are positioned relative to each other, `'default'` by default */\n  type?: BarChartType;\n\n  /** Controls fill opacity of all bars, `1` by default */\n  fillOpacity?: number;\n\n  /** Fill of hovered bar section, by default value is based on color scheme */\n  cursorFill?: MantineColor;\n\n  /** Props passed down to recharts `BarChart` component */\n  barChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsBarChart>;\n\n  /** Additional components that are rendered inside recharts `BarChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `Bar` component */\n  barProps?:\n    | ((series: BarChartSeries) => Partial<Omit<BarProps, 'ref'>>)\n    | Partial<Omit<BarProps, 'ref'>>;\n\n  /** Determines whether a label with bar value should be displayed on top of each bar, incompatible with `type=\"stacked\"` and `type=\"percent\"`, `false` by default */\n  withBarValueLabel?: boolean;\n\n  /** Props passed down to recharts `LabelList` component */\n  valueLabelProps?:\n    | ((series: BarChartSeries) => Partial<Omit<LabelListProps<Record<string, any>>, 'ref'>>)\n    | Partial<LabelListProps<Record<string, any>>>;\n\n  /** Sets minimum height of the bar in px, `0` by default */\n  minBarSize?: number;\n\n  /** Maximum bar width in px */\n  maxBarWidth?: number;\n\n  /** Controls color of the bar label, by default the value is determined by the chart orientation */\n  barLabelColor?: MantineColor;\n\n  /** A function to assign dynamic bar color based on its value */\n  getBarColor?: (value: number, series: BarChartSeries) => MantineColor;\n}\n\nexport type BarChartFactory = Factory<{\n  props: BarChartProps;\n  ref: HTMLDivElement;\n  stylesNames: BarChartStylesNames;\n  vars: BarChartCssVariables;\n}>;\n\nconst defaultProps: Partial<BarChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withTooltip: true,\n  tooltipAnimationDuration: 0,\n  fillOpacity: 1,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  gridAxis: 'x',\n  type: 'default',\n};\n\nconst varsResolver = createVarsResolver<BarChartFactory>(\n  (theme, { textColor, gridColor, cursorFill, barLabelColor }) => ({\n    root: {\n      '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n      '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n      '--chart-cursor-fill': cursorFill ? getThemeColor(cursorFill, theme) : undefined,\n      '--chart-bar-label-color': barLabelColor ? getThemeColor(barLabelColor, theme) : undefined,\n    },\n  })\n);\n\nfunction calculateCumulativeTotal(waterfallData: Record<string, any>[], dataKey: string) {\n  let start: number = 0;\n  let end: number = 0;\n  return waterfallData.map((item) => {\n    if (item.standalone) {\n      for (const prop in item) {\n        if (typeof item[prop] === 'number' && prop !== dataKey) {\n          item[prop] = [0, item[prop]];\n        }\n      }\n    } else {\n      for (const prop in item) {\n        if (typeof item[prop] === 'number' && prop !== dataKey) {\n          end += item[prop];\n          item[prop] = [start, end];\n          start = end;\n        }\n      }\n    }\n    return item;\n  });\n}\n\nfunction getBarFill(barProps: BarChartProps['barProps'], series: BarChartSeries) {\n  if (typeof barProps === 'function') {\n    return barProps(series).fill;\n  }\n\n  return barProps?.fill;\n}\n\nexport const BarChart = factory<BarChartFactory>((_props, ref) => {\n  const props = useProps('BarChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withLegend,\n    legendProps,\n    series,\n    onMouseLeave,\n    dataKey,\n    withTooltip,\n    withXAxis,\n    withYAxis,\n    gridAxis,\n    tickLine,\n    xAxisProps,\n    yAxisProps,\n    unit,\n    tooltipAnimationDuration,\n    strokeDasharray,\n    gridProps,\n    tooltipProps,\n    referenceLines,\n    fillOpacity,\n    barChartProps,\n    type,\n    orientation,\n    dir,\n    valueFormatter,\n    children,\n    barProps,\n    xAxisLabel,\n    yAxisLabel,\n    withBarValueLabel,\n    valueLabelProps,\n    withRightYAxis,\n    rightYAxisLabel,\n    rightYAxisProps,\n    minBarSize,\n    maxBarWidth,\n    mod,\n    getBarColor,\n    gridColor,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const stacked = type === 'stacked' || type === 'percent';\n  const tickFormatter = type === 'percent' ? valueToPercent : valueFormatter;\n\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<BarChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const inputData = type === 'waterfall' ? calculateCumulativeTotal(data, dataKey) : data;\n\n  const getStyles = useStyles<BarChartFactory>({\n    name: 'BarChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const bars = series.map((item) => {\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n\n    return (\n      <Bar\n        {...getStyles('bar')}\n        key={item.name}\n        name={item.name}\n        dataKey={item.name}\n        fill={color}\n        stroke={color}\n        isAnimationActive={false}\n        fillOpacity={dimmed ? 0.1 : fillOpacity}\n        strokeOpacity={dimmed ? 0.2 : 0}\n        stackId={stacked ? 'stack' : item.stackId || undefined}\n        yAxisId={item.yAxisId || 'left'}\n        minPointSize={minBarSize}\n        {...(typeof barProps === 'function' ? barProps(item) : barProps)}\n      >\n        {inputData.map((entry, index) => {\n          const cellColor = entry.color\n            ? getThemeColor(entry.color, theme)\n            : typeof getBarColor === 'function'\n              ? getThemeColor(getBarColor(entry[item.name], item), theme)\n              : getBarFill(barProps, item) || color;\n\n          return <Cell key={`cell-${index}`} fill={cellColor} />;\n        })}\n        {withBarValueLabel && (\n          <LabelList\n            position={orientation === 'vertical' ? 'right' : 'top'}\n            fontSize={12}\n            fill=\"var(--chart-bar-label-color, var(--mantine-color-dimmed))\"\n            formatter={tickFormatter}\n            {...(typeof valueLabelProps === 'function' ? valueLabelProps(item) : valueLabelProps)}\n          />\n        )}\n      </Bar>\n    );\n  });\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        yAxisId={line.yAxisId || 'left'}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  const sharedYAxisProps = {\n    axisLine: false,\n    ...(orientation === 'vertical'\n      ? { dataKey, type: 'category' as const }\n      : { type: 'number' as const }),\n    tickLine: withYTickLine ? { stroke: 'currentColor' } : false,\n    allowDecimals: true,\n    unit,\n    tickFormatter: orientation === 'vertical' ? undefined : tickFormatter,\n    ...getStyles('axis'),\n  };\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      mod={[{ orientation }, mod]}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsBarChart\n          data={inputData}\n          stackOffset={type === 'percent' ? 'expand' : undefined}\n          layout={orientation}\n          maxBarSize={maxBarWidth}\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...barChartProps}\n        >\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  showColor={type !== 'waterfall'}\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          <XAxis\n            hide={!withXAxis}\n            {...(orientation === 'vertical' ? { type: 'number' } : { dataKey })}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            tickFormatter={orientation === 'vertical' ? tickFormatter : undefined}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n\n          <YAxis\n            yAxisId=\"left\"\n            orientation=\"left\"\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withYAxis}\n            {...sharedYAxisProps}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            tick={{ transform: 'translate(10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withRightYAxis}\n            {...sharedYAxisProps}\n            {...rightYAxisProps}\n          >\n            {rightYAxisLabel && (\n              <Label\n                position=\"insideRight\"\n                angle={90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {rightYAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={tooltipAnimationDuration !== 0}\n              position={orientation === 'vertical' ? {} : { y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n                fill: 'var(--chart-cursor-fill)',\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  label={label}\n                  payload={payload}\n                  type={type === 'waterfall' ? 'scatter' : undefined}\n                  unit={unit}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {bars}\n          {referenceLinesItems}\n          {children}\n        </ReChartsBarChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nBarChart.displayName = '@mantine/charts/BarChart';\nBarChart.classes = classes;\n", "import { useState } from 'react';\nimport {\n  CartesianGrid,\n  DotProps,\n  Label,\n  Legend,\n  Line,\n  LineProps,\n  LineChart as ReChartsLineChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { useId } from '@mantine/hooks';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport { PointLabel } from '../PointLabel/PointLabel';\nimport type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';\nimport classes from '../grid-chart.module.css';\n\nexport type LineChartType = 'default' | 'gradient';\n\nexport interface LineChartGradientStop {\n  offset: number;\n  color: MantineColor;\n}\n\nexport type LineChartCurveType =\n  | 'bump'\n  | 'linear'\n  | 'natural'\n  | 'monotone'\n  | 'step'\n  | 'stepBefore'\n  | 'stepAfter';\n\nexport interface LineChartSeries extends ChartSeries {\n  strokeDasharray?: string | number;\n}\n\nexport type LineChartStylesNames =\n  | 'line'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type LineChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface LineChartProps\n  extends BoxProps,\n    GridChartBaseProps,\n    StylesApiProps<LineChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to display chart */\n  data: Record<string, any>[];\n\n  /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */\n  series: LineChartSeries[];\n\n  /** Controls styles of the line, `'default'` by default */\n  type?: LineChartType;\n\n  /** Data used to generate gradient stops, `[{ offset: 0, color: 'red' }, { offset: 100, color: 'blue' }]` by default */\n  gradientStops?: LineChartGradientStop[];\n\n  /** Type of the curve, `'monotone'` by default */\n  curveType?: LineChartCurveType;\n\n  /** Controls fill opacity of all lines, `1` by default */\n  fillOpacity?: number;\n\n  /** Determines whether dots should be displayed, `true` by default */\n  withDots?: boolean;\n\n  /** Props passed down to all dots. Ignored if `withDots={false}` is set. */\n  dotProps?: Omit<DotProps, 'ref'>;\n\n  /** Props passed down to all active dots. Ignored if `withDots={false}` is set. */\n  activeDotProps?: Omit<DotProps, 'ref'>;\n\n  /** Stroke width for the chart lines, `2` by default */\n  strokeWidth?: number;\n\n  /** Props passed down to recharts `LineChart` component */\n  lineChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsLineChart>;\n\n  /** Determines whether points with `null` values should be connected, `true` by default */\n  connectNulls?: boolean;\n\n  /** Additional components that are rendered inside recharts `LineChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `Line` component */\n  lineProps?:\n    | ((series: LineChartSeries) => Partial<Omit<LineProps, 'ref'>>)\n    | Partial<Omit<LineProps, 'ref'>>;\n\n  /** Determines whether each point should have associated label, `false` by default */\n  withPointLabels?: boolean;\n}\n\nexport type LineChartFactory = Factory<{\n  props: LineChartProps;\n  ref: HTMLDivElement;\n  stylesNames: LineChartStylesNames;\n  vars: LineChartCssVariables;\n}>;\n\nconst defaultProps: Partial<LineChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withTooltip: true,\n  tooltipAnimationDuration: 0,\n  fillOpacity: 1,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  gridAxis: 'x',\n  withDots: true,\n  connectNulls: true,\n  strokeWidth: 2,\n  curveType: 'monotone',\n  gradientStops: [\n    { offset: 0, color: 'red' },\n    { offset: 100, color: 'blue' },\n  ],\n};\n\nconst varsResolver = createVarsResolver<LineChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const LineChart = factory<LineChartFactory>((_props, ref) => {\n  const props = useProps('LineChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withLegend,\n    legendProps,\n    series,\n    onMouseLeave,\n    dataKey,\n    withTooltip,\n    withXAxis,\n    withYAxis,\n    gridAxis,\n    tickLine,\n    xAxisProps,\n    yAxisProps,\n    unit,\n    tooltipAnimationDuration,\n    strokeDasharray,\n    gridProps,\n    tooltipProps,\n    referenceLines,\n    withDots,\n    dotProps,\n    activeDotProps,\n    strokeWidth,\n    lineChartProps,\n    connectNulls,\n    fillOpacity,\n    curveType,\n    orientation,\n    dir,\n    valueFormatter,\n    children,\n    lineProps,\n    xAxisLabel,\n    yAxisLabel,\n    type,\n    gradientStops,\n    withRightYAxis,\n    rightYAxisLabel,\n    rightYAxisProps,\n    withPointLabels,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<LineChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<LineChartFactory>({\n    name: 'LineChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const id = useId();\n  const gradientId = `line-chart-gradient-${id}`;\n  const stops = gradientStops?.map((stop) => (\n    <stop\n      key={stop.color}\n      offset={`${stop.offset}%`}\n      stopColor={getThemeColor(stop.color, theme)}\n    />\n  ));\n\n  const lines = series.map((item) => {\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n\n    return (\n      <Line\n        {...getStyles('line')}\n        key={item.name}\n        name={item.name}\n        dataKey={item.name}\n        dot={\n          withDots\n            ? {\n                fillOpacity: dimmed ? 0 : 1,\n                strokeOpacity: dimmed ? 0 : 1,\n                strokeWidth: 1,\n                fill: type === 'gradient' ? 'var(--mantine-color-gray-7)' : color,\n                stroke: type === 'gradient' ? 'white' : color,\n                ...dotProps,\n              }\n            : false\n        }\n        activeDot={\n          withDots\n            ? {\n                fill: type === 'gradient' ? 'var(--mantine-color-gray-7)' : color,\n                stroke: type === 'gradient' ? 'white' : color,\n                ...activeDotProps,\n              }\n            : false\n        }\n        fill={color}\n        stroke={type === 'gradient' ? `url(#${gradientId})` : color}\n        strokeWidth={strokeWidth}\n        isAnimationActive={false}\n        fillOpacity={dimmed ? 0 : fillOpacity}\n        strokeOpacity={dimmed ? 0.5 : fillOpacity}\n        connectNulls={connectNulls}\n        type={curveType}\n        strokeDasharray={item.strokeDasharray}\n        yAxisId={item.yAxisId || 'left'}\n        label={withPointLabels ? <PointLabel valueFormatter={valueFormatter} /> : undefined}\n        {...(typeof lineProps === 'function' ? lineProps(item) : lineProps)}\n      />\n    );\n  });\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        yAxisId={line.yAxisId || 'left'}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  const sharedYAxisProps = {\n    axisLine: false,\n    ...(orientation === 'vertical'\n      ? { dataKey, type: 'category' as const }\n      : { type: 'number' as const }),\n    tickLine: withYTickLine ? { stroke: 'currentColor' } : false,\n    allowDecimals: true,\n    unit,\n    tickFormatter: orientation === 'vertical' ? undefined : valueFormatter,\n    ...getStyles('axis'),\n  };\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsLineChart\n          data={data}\n          layout={orientation}\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...lineChartProps}\n        >\n          {type === 'gradient' && (\n            <defs>\n              <linearGradient id={gradientId} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                {stops}\n              </linearGradient>\n            </defs>\n          )}\n\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  showColor={type !== 'gradient'}\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          <XAxis\n            hide={!withXAxis}\n            {...(orientation === 'vertical' ? { type: 'number' } : { dataKey })}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            tickFormatter={orientation === 'vertical' ? valueFormatter : undefined}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n\n          <YAxis\n            yAxisId=\"left\"\n            orientation=\"left\"\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withYAxis}\n            {...sharedYAxisProps}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            tick={{ transform: 'translate(10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withRightYAxis}\n            {...sharedYAxisProps}\n            {...rightYAxisProps}\n          >\n            {rightYAxisLabel && (\n              <Label\n                position=\"insideRight\"\n                angle={90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {rightYAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={tooltipAnimationDuration !== 0}\n              position={orientation === 'vertical' ? {} : { y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  label={label}\n                  payload={payload}\n                  unit={unit}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  valueFormatter={valueFormatter}\n                  showColor={type !== 'gradient'}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {lines}\n          {referenceLinesItems}\n          {children}\n        </ReChartsLineChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nLineChart.displayName = '@mantine/charts/LineChart';\nLineChart.classes = classes;\n", "import { useId, useMemo } from 'react';\nimport { Area, AreaProps, AreaChart as ReChartsAreaChart, ResponsiveContainer } from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { AreaChartCurveType, AreaGradient } from '../AreaChart';\n\nconst classes = {};\n\nexport interface SparklineTrendColors {\n  positive: MantineColor;\n  negative: MantineColor;\n  neutral?: MantineColor;\n}\n\nexport type SparklineStylesNames = 'root';\nexport type SparklineCssVariables = {\n  root: '--chart-color';\n};\n\nexport interface SparklineProps\n  extends BoxProps,\n    StylesApiProps<SparklineFactory>,\n    ElementProps<'div'> {\n  /** Data used to render the chart */\n  data: (number | null)[];\n\n  /** Key of `theme.colors` or any valid CSS color, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Determines whether the chart fill should be a gradient, `true` by default */\n  withGradient?: boolean;\n\n  /** Controls fill opacity of the area, `0.6` by default */\n  fillOpacity?: number;\n\n  /** Type of the curve, `'linear'` by default */\n  curveType?: AreaChartCurveType;\n\n  /** Area stroke width, `2` by default */\n  strokeWidth?: number;\n\n  /** If set, `color` prop is ignored and chart color is determined by the difference between first and last value. */\n  trendColors?: SparklineTrendColors;\n\n  /** Determines whether null values should be connected with other values, `true` by default */\n  connectNulls?: boolean;\n\n  /** Props passed down to the underlying recharts `Area` component */\n  areaProps?: Omit<AreaProps, 'data' | 'dataKey' | 'ref'>;\n}\n\nexport type SparklineFactory = Factory<{\n  props: SparklineProps;\n  ref: HTMLDivElement;\n  stylesNames: SparklineStylesNames;\n  vars: SparklineCssVariables;\n}>;\n\nconst defaultProps: Partial<SparklineProps> = {\n  withGradient: true,\n  connectNulls: true,\n  fillOpacity: 0.6,\n  strokeWidth: 2,\n  curveType: 'linear',\n};\n\nfunction getTrendColor(data: (number | null)[], trendColors: SparklineTrendColors) {\n  const first = data[0];\n  const last = data[data.length - 1];\n\n  if (first === null || last === null) {\n    return trendColors.neutral || trendColors.positive;\n  }\n\n  if (first < last) {\n    return trendColors.positive;\n  }\n\n  if (first > last) {\n    return trendColors.negative;\n  }\n\n  return trendColors.neutral || trendColors.positive;\n}\n\nconst varsResolver = createVarsResolver<SparklineFactory>(\n  (theme, { color, data, trendColors }) => ({\n    root: {\n      '--chart-color': trendColors\n        ? getThemeColor(getTrendColor(data, trendColors), theme)\n        : color\n          ? getThemeColor(color, theme)\n          : undefined,\n    },\n  })\n);\n\nexport const Sparkline = factory<SparklineFactory>((_props, ref) => {\n  const props = useProps('Sparkline', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withGradient,\n    fillOpacity,\n    curveType,\n    strokeWidth,\n    trendColors,\n    connectNulls,\n    areaProps,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<SparklineFactory>({\n    name: 'Sparkline',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const id = useId();\n  const mappedData = useMemo(() => data.map((value, index) => ({ value, index })), [data]);\n\n  return (\n    <Box ref={ref} {...getStyles('root')} {...others} dir=\"ltr\">\n      <ResponsiveContainer>\n        <ReChartsAreaChart data={mappedData}>\n          <Area\n            dataKey=\"value\"\n            type={curveType}\n            fill={`url(#${id})`}\n            stroke=\"var(--chart-color, var(--mantine-color-blue-filled))\"\n            isAnimationActive={false}\n            connectNulls={connectNulls}\n            strokeWidth={strokeWidth}\n            fillOpacity={1}\n            {...areaProps}\n          />\n\n          <defs>\n            <AreaGradient\n              id={id}\n              color=\"var(--chart-color, var(--mantine-color-blue-filled))\"\n              fillOpacity={fillOpacity}\n              withGradient={withGradient}\n            />\n          </defs>\n        </ReChartsAreaChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nSparkline.displayName = '@mantine/charts/Sparkline';\nSparkline.classes = classes;\n", "'use client';\nvar classes = {\"root\":\"m_a410e613\",\"label\":\"m_ddb0bfe3\"};\n\nexport { classes as default };\n//# sourceMappingURL=DonutChart.module.css.mjs.map\n", "import {\n  Cell,\n  Pie,\n  PieLabel,\n  PieProps,\n  PieChart as ReChartsPieChart,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartTooltip } from '../ChartTooltip/ChartTooltip';\nimport classes from './DonutChart.module.css';\n\nexport interface DonutChartCell {\n  name: string;\n  value: number;\n  color: MantineColor;\n}\n\nexport type DonutChartStylesNames = 'root' | 'label';\nexport type DonutChartCssVariables = {\n  root: '--chart-stroke-color' | '--chart-labels-color' | '--chart-size';\n};\n\nexport interface DonutChartProps\n  extends BoxProps,\n    StylesApiProps<DonutChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to render chart */\n  data: DonutChartCell[];\n\n  /** Determines whether the tooltip should be displayed when one of the section is hovered, `true` by default */\n  withTooltip?: boolean;\n\n  /** Tooltip animation duration in ms, `0` by default */\n  tooltipAnimationDuration?: number;\n\n  /** Props passed down to `Tooltip` recharts component */\n  tooltipProps?: Omit<TooltipProps<any, any>, 'ref'>;\n\n  /** Props passed down to recharts `Pie` component */\n  pieProps?: Partial<Omit<PieProps, 'ref'>>;\n\n  /** Controls color of the segments stroke, by default depends on color scheme */\n  strokeColor?: MantineColor;\n\n  /** Controls text color of all labels, by default depends on color scheme */\n  labelColor?: MantineColor;\n\n  /** Controls padding between segments, `0` by default */\n  paddingAngle?: number;\n\n  /** Determines whether each segment should have associated label, `false` by default */\n  withLabels?: boolean;\n\n  /** Determines whether segments labels should have lines that connect the segment with the label, `true` by default */\n  withLabelsLine?: boolean;\n\n  /** Controls thickness of the chart segments, `20` by default */\n  thickness?: number;\n\n  /** Controls chart width and height, height is increased by 40 if `withLabels` prop is set. Cannot be less than `thickness`. `80` by default */\n  size?: number;\n\n  /** Controls width of segments stroke, `1` by default */\n  strokeWidth?: number;\n\n  /** Controls angle at which chart starts, `0` by default. Set to `180` to render the chart as semicircle. */\n  startAngle?: number;\n\n  /** Controls angle at which charts ends, `360` by default. Set to `0` to render the chart as semicircle. */\n  endAngle?: number;\n\n  /** Determines which data is displayed in the tooltip. `'all'` – display all values, `'segment'` – display only hovered segment. `'all'` by default. */\n  tooltipDataSource?: 'segment' | 'all';\n\n  /** Chart label, displayed in the center of the chart */\n  chartLabel?: string | number;\n\n  /** Additional elements rendered inside `PieChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `PieChart` component */\n  pieChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsPieChart>;\n\n  /** Type of labels to display, `'value'` by default */\n  labelsType?: 'value' | 'percent';\n\n  /** A function to format values inside the tooltip */\n  valueFormatter?: (value: number) => string;\n}\n\nexport type DonutChartFactory = Factory<{\n  props: DonutChartProps;\n  ref: HTMLDivElement;\n  stylesNames: DonutChartStylesNames;\n  vars: DonutChartCssVariables;\n}>;\n\nconst defaultProps: Partial<DonutChartProps> = {\n  withTooltip: true,\n  withLabelsLine: true,\n  paddingAngle: 0,\n  thickness: 20,\n  size: 160,\n  strokeWidth: 1,\n  startAngle: 0,\n  endAngle: 360,\n  labelsType: 'value',\n  tooltipDataSource: 'all',\n};\n\nconst varsResolver = createVarsResolver<DonutChartFactory>(\n  (theme, { strokeColor, labelColor, withLabels, size }) => ({\n    root: {\n      '--chart-stroke-color': strokeColor ? getThemeColor(strokeColor, theme) : undefined,\n      '--chart-labels-color': labelColor ? getThemeColor(labelColor, theme) : undefined,\n      '--chart-size': withLabels ? rem(size! + 80) : rem(size!),\n    },\n  })\n);\n\nconst getLabelValue = (\n  labelsType: DonutChartProps['labelsType'],\n  value: number,\n  percent: number,\n  valueFormatter?: DonutChartProps['valueFormatter']\n) => {\n  if (labelsType === 'percent') {\n    return `${(percent * 100).toFixed(0)}%`;\n  }\n\n  if (typeof valueFormatter === 'function') {\n    return valueFormatter(value);\n  }\n\n  return value;\n};\n\nconst getLabel =\n  (labelsType: 'value' | 'percent', valueFormatter?: DonutChartProps['valueFormatter']): PieLabel =>\n  ({ x, y, cx, cy, percent, value }) => (\n    <text\n      x={x}\n      y={y}\n      cx={cx}\n      cy={cy}\n      textAnchor={x > cx ? 'start' : 'end'}\n      fill=\"var(--chart-labels-color, var(--mantine-color-dimmed))\"\n      fontFamily=\"var(--mantine-font-family)\"\n      fontSize={12}\n    >\n      <tspan x={x}>{getLabelValue(labelsType, value, percent, valueFormatter)}</tspan>\n    </text>\n  );\n\nexport const DonutChart = factory<DonutChartFactory>((_props, ref) => {\n  const props = useProps('DonutChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withTooltip,\n    tooltipAnimationDuration,\n    tooltipProps,\n    pieProps,\n    paddingAngle,\n    withLabels,\n    withLabelsLine,\n    size,\n    thickness,\n    strokeWidth,\n    startAngle,\n    endAngle,\n    tooltipDataSource,\n    chartLabel,\n    children,\n    pieChartProps,\n    valueFormatter,\n    strokeColor,\n    labelsType,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<DonutChartFactory>({\n    name: 'DonutChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<DonutChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const cells = data.map((item, index) => (\n    <Cell\n      key={index}\n      fill={getThemeColor(item.color, theme)}\n      stroke=\"var(--chart-stroke-color, var(--mantine-color-body))\"\n      strokeWidth={strokeWidth}\n    />\n  ));\n\n  return (\n    <Box ref={ref} size={size} {...getStyles('root')} {...others}>\n      <ResponsiveContainer>\n        <ReChartsPieChart {...pieChartProps}>\n          <Pie\n            data={data}\n            innerRadius={size! / 2 - thickness!}\n            outerRadius={size! / 2}\n            dataKey=\"value\"\n            isAnimationActive={false}\n            paddingAngle={paddingAngle}\n            startAngle={startAngle}\n            endAngle={endAngle}\n            label={withLabels ? getLabel(labelsType || 'value', valueFormatter) : false}\n            labelLine={\n              withLabelsLine\n                ? {\n                    stroke: 'var(--chart-label-color, var(--mantine-color-dimmed))',\n                    strokeWidth: 1,\n                  }\n                : false\n            }\n            {...pieProps}\n          >\n            {cells}\n          </Pie>\n\n          {chartLabel && (\n            <text\n              x=\"50%\"\n              y=\"50%\"\n              textAnchor=\"middle\"\n              dominantBaseline=\"middle\"\n              {...getStyles('label')}\n            >\n              {chartLabel}\n            </text>\n          )}\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={false}\n              content={({ payload }) => (\n                <ChartTooltip\n                  payload={data}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  type=\"radial\"\n                  segmentId={tooltipDataSource === 'segment' ? payload?.[0]?.name : undefined}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {children}\n        </ReChartsPieChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nDonutChart.displayName = '@mantine/charts/DonutChart';\nDonutChart.classes = classes;\n", "'use client';\nvar classes = {\"root\":\"m_cd8943fd\"};\n\nexport { classes as default };\n//# sourceMappingURL=PieChart.module.css.mjs.map\n", "import {\n  Cell,\n  Pie,\n  PieLabel,\n  PieProps,\n  PieChart as ReChartsPieChart,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartTooltip } from '../ChartTooltip/ChartTooltip';\nimport classes from './PieChart.module.css';\n\nexport interface PieChartCell {\n  key?: string | number;\n  name: string;\n  value: number;\n  color: MantineColor;\n}\n\nexport type PieChartStylesNames = 'root';\nexport type PieChartCssVariables = {\n  root: '--chart-stroke-color' | '--chart-labels-color' | '--chart-size';\n};\n\nexport interface PieChartProps\n  extends BoxProps,\n    StylesApiProps<PieChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to render chart */\n  data: PieChartCell[];\n\n  /** Determines whether the tooltip should be displayed when one of the section is hovered, `true` by default */\n  withTooltip?: boolean;\n\n  /** Tooltip animation duration in ms, `0` by default */\n  tooltipAnimationDuration?: number;\n\n  /** Props passed down to `Tooltip` recharts component */\n  tooltipProps?: Omit<TooltipProps<any, any>, 'ref'>;\n\n  /** Props passed down to recharts `Pie` component */\n  pieProps?: Partial<Omit<PieProps, 'ref'>>;\n\n  /** Controls color of the segments stroke, by default depends on color scheme */\n  strokeColor?: MantineColor;\n\n  /** Controls text color of all labels, white by default */\n  labelColor?: MantineColor;\n\n  /** Controls padding between segments, `0` by default */\n  paddingAngle?: number;\n\n  /** Determines whether each segment should have associated label, `false` by default */\n  withLabels?: boolean;\n\n  /** Determines whether segments labels should have lines that connect the segment with the label, `true` by default */\n  withLabelsLine?: boolean;\n\n  /** Controls chart width and height, height is increased by 40 if `withLabels` prop is set. Cannot be less than `thickness`. `80` by default */\n  size?: number;\n\n  /** Controls width of segments stroke, `1` by default */\n  strokeWidth?: number;\n\n  /** Controls angle at which chart starts, `0` by default. Set to `180` to render the chart as semicircle. */\n  startAngle?: number;\n\n  /** Controls angle at which charts ends, `360` by default. Set to `0` to render the chart as semicircle. */\n  endAngle?: number;\n\n  /** Determines which data is displayed in the tooltip. `'all'` – display all values, `'segment'` – display only hovered segment. `'all'` by default. */\n  tooltipDataSource?: 'segment' | 'all';\n\n  /** Additional elements rendered inside `PieChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `PieChart` component */\n  pieChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsPieChart>;\n\n  /** Controls labels position relative to the segment, `'outside'` by default */\n  labelsPosition?: 'inside' | 'outside';\n\n  /** Type of labels to display, `'value'` by default */\n  labelsType?: 'value' | 'percent';\n\n  /** A function to format values inside the tooltip */\n  valueFormatter?: (value: number) => string;\n}\n\nexport type PieChartFactory = Factory<{\n  props: PieChartProps;\n  ref: HTMLDivElement;\n  stylesNames: PieChartStylesNames;\n  vars: PieChartCssVariables;\n}>;\n\nconst defaultProps: Partial<PieChartProps> = {\n  withTooltip: false,\n  withLabelsLine: true,\n  paddingAngle: 0,\n  size: 160,\n  strokeWidth: 1,\n  startAngle: 0,\n  endAngle: 360,\n  tooltipDataSource: 'all',\n  labelsPosition: 'outside',\n  labelsType: 'value',\n};\n\nconst varsResolver = createVarsResolver<PieChartFactory>(\n  (theme, { strokeColor, labelColor, withLabels, size, labelsPosition }) => ({\n    root: {\n      '--chart-stroke-color': strokeColor ? getThemeColor(strokeColor, theme) : undefined,\n      '--chart-labels-color': labelColor ? getThemeColor(labelColor, theme) : undefined,\n      '--chart-size': withLabels && labelsPosition === 'outside' ? rem(size! + 80) : rem(size!),\n    },\n  })\n);\n\nconst getLabelValue = (\n  labelsType: PieChartProps['labelsType'],\n  value: number,\n  percent: number,\n  valueFormatter?: PieChartProps['valueFormatter']\n) => {\n  if (labelsType === 'percent') {\n    return `${(percent * 100).toFixed(0)}%`;\n  }\n\n  if (typeof valueFormatter === 'function') {\n    return valueFormatter(value);\n  }\n\n  return value;\n};\n\nconst getInsideLabel =\n  (labelsType: 'value' | 'percent', valueFormatter?: PieChartProps['valueFormatter']): PieLabel =>\n  ({ cx, cy, midAngle, innerRadius, outerRadius, value, percent }) => {\n    const RADIAN = Math.PI / 180;\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        textAnchor={x > cx ? 'start' : 'end'}\n        dominantBaseline=\"central\"\n        className={classes.label}\n      >\n        {getLabelValue(labelsType, value, percent, valueFormatter)}\n      </text>\n    );\n  };\n\nconst getOutsideLabel =\n  (labelsType: 'value' | 'percent', valueFormatter?: PieChartProps['valueFormatter']): PieLabel =>\n  ({ x, y, cx, cy, percent, value }) => (\n    <text\n      x={x}\n      y={y}\n      cx={cx}\n      cy={cy}\n      textAnchor={x > cx ? 'start' : 'end'}\n      fill=\"var(--chart-labels-color, var(--mantine-color-dimmed))\"\n      fontFamily=\"var(--mantine-font-family)\"\n      fontSize={12}\n    >\n      <tspan x={x}>{getLabelValue(labelsType, value, percent, valueFormatter)}</tspan>\n    </text>\n  );\n\nexport const PieChart = factory<PieChartFactory>((_props, ref) => {\n  const props = useProps('PieChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withTooltip,\n    tooltipAnimationDuration,\n    tooltipProps,\n    pieProps,\n    paddingAngle,\n    withLabels,\n    withLabelsLine,\n    size,\n    strokeWidth,\n    startAngle,\n    endAngle,\n    tooltipDataSource,\n    children,\n    pieChartProps,\n    labelsPosition,\n    valueFormatter,\n    labelsType,\n    strokeColor,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<PieChartFactory>({\n    name: 'PieChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<PieChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const cells = data.map((item, index) => (\n    <Cell\n      key={index}\n      fill={getThemeColor(item.color, theme)}\n      stroke=\"var(--chart-stroke-color, var(--mantine-color-body))\"\n      strokeWidth={strokeWidth}\n    />\n  ));\n\n  return (\n    <Box ref={ref} size={size} {...getStyles('root')} {...others}>\n      <ResponsiveContainer>\n        <ReChartsPieChart {...pieChartProps}>\n          <Pie\n            data={data}\n            innerRadius={0}\n            outerRadius={size! / 2}\n            dataKey=\"value\"\n            isAnimationActive={false}\n            paddingAngle={paddingAngle}\n            startAngle={startAngle}\n            endAngle={endAngle}\n            label={\n              withLabels\n                ? labelsPosition === 'inside'\n                  ? getInsideLabel(labelsType || 'value', valueFormatter)\n                  : getOutsideLabel(labelsType || 'value', valueFormatter)\n                : false\n            }\n            labelLine={\n              withLabelsLine && labelsPosition === 'outside'\n                ? {\n                    stroke: 'var(--chart-label-color, var(--mantine-color-dimmed))',\n                    strokeWidth: 1,\n                  }\n                : false\n            }\n            {...pieProps}\n          >\n            {cells}\n          </Pie>\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={false}\n              content={({ payload }) => (\n                <ChartTooltip\n                  payload={data}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  type=\"radial\"\n                  segmentId={tooltipDataSource === 'segment' ? payload?.[0]?.name : undefined}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {children}\n        </ReChartsPieChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nPieChart.displayName = '@mantine/charts/PieChart';\nPieChart.classes = classes;\n", "'use client';\nvar classes = {\"root\":\"m_1f271cf7\",\"container\":\"m_cf06f58c\"};\n\nexport { classes as default };\n//# sourceMappingURL=RadarChart.module.css.mjs.map\n", "import { useState } from 'react';\nimport {\n  Legend,\n  LegendProps,\n  PolarAngleAxis,\n  PolarAngleAxisProps,\n  PolarGrid,\n  PolarGridProps,\n  PolarRadiusAxis,\n  PolarRadiusAxisProps,\n  Radar,\n  RadarProps,\n  RadarChart as ReChartsRadarChart,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend } from '../ChartLegend';\nimport classes from './RadarChart.module.css';\n\nexport interface RadarChartSeries {\n  name: string;\n  color: MantineColor;\n  strokeColor?: MantineColor;\n  opacity?: number;\n  label?: string;\n}\n\nexport type RadarChartStylesNames = 'root' | 'container';\nexport type RadarChartCssVariables = {\n  root: '--chart-grid-color' | '--chart-text-color';\n};\n\nexport interface RadarChartProps\n  extends BoxProps,\n    StylesApiProps<RadarChartFactory>,\n    ElementProps<'div'> {\n  /** Data used in the chart */\n  data: Record<string, any>[];\n\n  /** Determines which data should be consumed from the `data` array. */\n  series: RadarChartSeries[];\n\n  /** Key of the `data` object for axis values */\n  dataKey: string;\n\n  /** Controls color of the grid lines. By default, color depends on the color scheme. */\n  gridColor?: MantineColor;\n\n  /** Controls color of all text elements. By default, color depends on the color scheme. */\n  textColor?: MantineColor;\n\n  /** Determines whether PolarGrid component should be displayed, `true` by default. */\n  withPolarGrid?: boolean;\n\n  /** Determines whether PolarAngleAxis component should be displayed, `true` by default */\n  withPolarAngleAxis?: boolean;\n\n  /** Determines whether PolarRadiusAxisProps component should be displayed, `false` by default */\n  withPolarRadiusAxis?: boolean;\n\n  /** Props passed down to recharts Radar component */\n  radarProps?:\n    | ((series: RadarChartSeries) => Partial<Omit<RadarProps, 'ref'>>)\n    | Partial<Omit<RadarProps, 'ref'>>;\n\n  /** Props passed down to recharts RadarChart component */\n  radarChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsRadarChart>;\n\n  /** Props passed down to recharts PolarGrid component */\n  polarGridProps?: Omit<PolarGridProps, 'ref'>;\n\n  /** Props passed down to recharts PolarAngleAxis component */\n  polarAngleAxisProps?: Omit<PolarAngleAxisProps, 'ref'>;\n\n  /** Props passed down to recharts PolarRadiusAxis component */\n  polarRadiusAxisProps?: Omit<PolarRadiusAxisProps, 'ref'>;\n\n  /** Props passed down to recharts Legend component */\n  legendProps?: Omit<LegendProps, 'ref'>;\n\n  /** Determines whether the legend should be displayed, `false` by default */\n  withLegend?: boolean;\n\n  /** Additional components that are rendered inside recharts `RadarChart` component */\n  children?: React.ReactNode;\n}\n\nexport type RadarChartFactory = Factory<{\n  props: RadarChartProps;\n  ref: HTMLDivElement;\n  stylesNames: RadarChartStylesNames;\n  vars: RadarChartCssVariables;\n}>;\n\nconst defaultProps: Partial<RadarChartProps> = {\n  withPolarGrid: true,\n  withPolarAngleAxis: true,\n  withPolarRadiusAxis: false,\n};\n\nconst varsResolver = createVarsResolver<RadarChartFactory>((theme, { gridColor, textColor }) => ({\n  root: {\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n  },\n}));\n\nexport const RadarChart = factory<RadarChartFactory>((_props, ref) => {\n  const props = useProps('RadarChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    series,\n    dataKey,\n    gridColor,\n    textColor,\n    radarProps,\n    radarChartProps,\n    polarGridProps,\n    polarAngleAxisProps,\n    polarRadiusAxisProps,\n    withPolarGrid,\n    withPolarAngleAxis,\n    withPolarRadiusAxis,\n    children,\n    withLegend,\n    legendProps,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<RadarChartFactory>({\n    name: 'RadarChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<RadarChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const radars = series.map((item, index) => (\n    <Radar\n      key={index}\n      name={item.name}\n      dataKey={item.name}\n      stroke={getThemeColor(item.strokeColor || item.color, theme)}\n      fill={getThemeColor(item.color, theme)}\n      fillOpacity={\n        highlightedArea\n          ? highlightedArea === item.name\n            ? item.opacity || 0.4\n            : 0.05\n          : item.opacity || 0.4\n      }\n      strokeOpacity={highlightedArea ? (highlightedArea === item.name ? 1 : 0.1) : 1}\n      isAnimationActive={false}\n      {...(typeof radarProps === 'function' ? radarProps(item) : radarProps)}\n    />\n  ));\n\n  return (\n    <Box ref={ref} {...getStyles('root')} {...others}>\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsRadarChart data={data} {...radarChartProps}>\n          {withPolarGrid && <PolarGrid stroke=\"var(--chart-grid-color)\" {...polarGridProps} />}\n          {withPolarAngleAxis && <PolarAngleAxis dataKey={dataKey} {...polarAngleAxisProps} />}\n          {withPolarRadiusAxis && (\n            <PolarRadiusAxis stroke=\"var(--chart-grid-color)\" {...polarRadiusAxisProps} />\n          )}\n          {radars}\n          {withLegend && (\n            <Legend\n              verticalAlign=\"bottom\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'bottom'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  centered\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n          {children}\n        </ReChartsRadarChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nRadarChart.displayName = '@mantine/charts/RadarChart';\nRadarChart.classes = classes;\n", "import { useState } from 'react';\nimport {\n  CartesianGrid,\n  Label,\n  LabelList,\n  Legend,\n  ScatterChart as ReChartsScatterChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Scatter,\n  ScatterProps,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport { BaseChartStylesNames, GridChartBaseProps } from '../types';\nimport classes from '../grid-chart.module.css';\n\nexport interface ScatterChartSeries {\n  color: MantineColor;\n  name: string;\n  data: Record<string, number>[];\n}\n\nexport type ScatterChartStylesNames =\n  | 'scatter'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type ScatterChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface ScatterChartProps\n  extends Omit<GridChartBaseProps, 'dataKey' | 'data' | 'unit' | 'valueFormatter'>,\n    BoxProps,\n    StylesApiProps<ScatterChartFactory>,\n    ElementProps<'div'> {\n  /** Keys that should be used to retrieve data from the data array on x and y axis */\n  dataKey: { x: string; y: string };\n\n  /** Data that is used to build the chart */\n  data: ScatterChartSeries[];\n\n  /** Units displayed after value on axis and inside the tooltip */\n  unit?: { x?: string; y?: string };\n\n  /** Labels that should be used instead of keys names in the tooltip */\n  labels?: { x?: string; y?: string };\n\n  /** A function to format values on x/y axis and in the tooltip */\n  valueFormatter?:\n    | GridChartBaseProps['valueFormatter']\n    | { x?: GridChartBaseProps['valueFormatter']; y?: GridChartBaseProps['valueFormatter'] };\n\n  /** Props passed down to recharts `ScatterChart` component */\n  scatterChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsScatterChart>;\n\n  /** Props passed down to recharts `Scatter` component */\n  scatterProps?: Partial<Omit<ScatterProps, 'ref'>>;\n\n  /** If set, displays labels next to points for the given axis */\n  pointLabels?: 'x' | 'y';\n}\n\nfunction getAxis(key: string, dataKey: { x: string; y: string }) {\n  return key === dataKey.x ? 'x' : 'y';\n}\n\nexport type ScatterChartFactory = Factory<{\n  props: ScatterChartProps;\n  ref: HTMLDivElement;\n  stylesNames: ScatterChartStylesNames;\n  vars: ScatterChartCssVariables;\n}>;\n\nconst defaultProps: Partial<ScatterChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withTooltip: true,\n  tooltipAnimationDuration: 0,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  gridAxis: 'x',\n};\n\nconst varsResolver = createVarsResolver<ScatterChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const ScatterChart = factory<ScatterChartFactory>((_props, ref) => {\n  const props = useProps('ScatterChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    referenceLines,\n    dir,\n    withLegend,\n    withTooltip,\n    withXAxis,\n    withYAxis,\n    xAxisProps,\n    yAxisProps,\n    orientation,\n    scatterChartProps,\n    legendProps,\n    data,\n    gridAxis,\n    tickLine,\n    strokeDasharray,\n    gridProps,\n    tooltipAnimationDuration,\n    tooltipProps,\n    children,\n    onMouseLeave,\n    dataKey,\n    textColor,\n    gridColor,\n    xAxisLabel,\n    yAxisLabel,\n    unit,\n    labels,\n    valueFormatter,\n    scatterProps,\n    pointLabels,\n    ...others\n  } = props;\n\n  const getFormatter = (axis: 'x' | 'y') =>\n    typeof valueFormatter === 'function' ? valueFormatter : valueFormatter?.[axis];\n  const xFormatter = getFormatter('x');\n  const yFormatter = getFormatter('y');\n\n  const theme = useMantineTheme();\n\n  const mappedData = data.map((item) => ({\n    ...item,\n    data: item.data.map((point) => ({ ...point, name: item.name })),\n  }));\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<ScatterChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<ScatterChartFactory>({\n    name: 'ScatterChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  const scatters = mappedData.map((item, index) => {\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n    return (\n      <Scatter\n        data={item.data}\n        fill={getThemeColor(item.color, theme)}\n        key={index}\n        isAnimationActive={false}\n        fillOpacity={dimmed ? 0.1 : 1}\n        {...scatterProps}\n      >\n        {pointLabels && <LabelList dataKey={dataKey[pointLabels]} fontSize={8} dy={10} />}\n        {scatterProps?.children}\n      </Scatter>\n    );\n  });\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsScatterChart\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...scatterChartProps}\n        >\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n          <XAxis\n            type=\"number\"\n            hide={!withXAxis}\n            dataKey={dataKey.x}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            unit={unit?.x}\n            tickFormatter={xFormatter}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n          <YAxis\n            type=\"number\"\n            hide={!withYAxis}\n            axisLine={false}\n            dataKey={dataKey.y}\n            tickLine={withYTickLine ? { stroke: 'currentColor' } : false}\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            allowDecimals\n            unit={unit?.y}\n            tickFormatter={yFormatter}\n            {...getStyles('axis')}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={tooltipAnimationDuration !== 0}\n              position={{ y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  type=\"scatter\"\n                  label={label}\n                  payload={\n                    labels\n                      ? payload?.map((item) => ({\n                          ...item,\n                          name: labels[getAxis(item.name, dataKey)] || item.name,\n                          value:\n                            getFormatter(getAxis(item.name, dataKey))?.(item.value) ?? item.value,\n                        }))\n                      : payload?.map((item) => ({\n                          ...item,\n                          value:\n                            getFormatter(getAxis(item.name, dataKey))?.(item.value) ?? item.value,\n                        }))\n                  }\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={data}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload?.map((item, index) => ({\n                    ...item,\n                    dataKey: data[index].name,\n                  }))}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={data}\n                />\n              )}\n              height={44}\n              {...legendProps}\n            />\n          )}\n\n          {referenceLinesItems}\n          {scatters}\n        </ReChartsScatterChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nScatterChart.displayName = '@mantine/charts/ScatterChart';\nScatterChart.classes = classes;\n", "import {\n  ResponsiveContainer,\n  Scatter,\n  ScatterChart,\n  ScatterProps,\n  Tooltip,\n  TooltipProps,\n  XAxis,\n  XAxisProps,\n  YAxis,\n  YAxisProps,\n  ZAxis,\n  ZAxisProps,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  GetStylesApi,\n  getThemeColor,\n  Group,\n  MantineColor,\n  StylesApiProps,\n  Text,\n  useMantineTheme,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport classes from '../grid-chart.module.css';\n\nfunction getDomain(data: Record<string, any>[], key: string) {\n  const values = data.map((item) => item[key]);\n  return [Math.min(...values), Math.max(...values)];\n}\n\ninterface BubbleChartTooltipProps {\n  payload: any;\n  active: boolean | undefined;\n  getStyles: GetStylesApi<BubbleChartFactory>;\n  valueFormatter?: (value: number) => string;\n  dataKey: BubbleChartDataKey;\n}\n\nfunction BubbleChartTooltip({\n  active,\n  payload,\n  getStyles,\n  dataKey,\n  valueFormatter,\n}: BubbleChartTooltipProps) {\n  if (active && payload && payload.length) {\n    const data = payload[0] && payload[0].payload;\n\n    return (\n      <div {...getStyles('tooltip')}>\n        <Group justify=\"space-between\">\n          <Text fz=\"sm\">{data[dataKey.x]}</Text>\n          <Text fz=\"sm\">{valueFormatter ? valueFormatter(data[dataKey.z]) : data[dataKey.z]}</Text>\n        </Group>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport type BubbleChartStylesNames = 'root' | 'axis' | 'tooltip';\nexport type BubbleChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface BubbleChartDataKey {\n  x: string;\n  y: string;\n  z: string;\n}\n\nexport interface BubbleChartProps\n  extends BoxProps,\n    StylesApiProps<BubbleChartFactory>,\n    ElementProps<'div'> {\n  /** Chart data */\n  data: Record<string, any>[];\n\n  /** Data keys for x, y and z axis */\n  dataKey: BubbleChartDataKey;\n\n  /** Z axis range */\n  range: [number, number];\n\n  /** Color of the chart items. Key of `theme.colors` or any valid CSS color, `blue.6` by default. */\n  color?: MantineColor;\n\n  /** Props passed down to the `XAxis` recharts component */\n  xAxisProps?: Omit<XAxisProps, 'ref'>;\n\n  /** Props passed down to the `YAxis` recharts component */\n  yAxisProps?: Omit<YAxisProps, 'ref'>;\n\n  /** Props passed down to the `ZAxis` recharts component */\n  zAxisProps?: Omit<ZAxisProps, 'ref'>;\n\n  /** Props passed down to the `Tooltip` component */\n  tooltipProps?: Omit<TooltipProps<any, any>, 'ref'>;\n\n  /** Props passed down to the `Scatter` component */\n  scatterProps?: Partial<Omit<ScatterProps, 'ref'>>;\n\n  /** Color of the text displayed inside the chart, `'dimmed'` by default */\n  textColor?: MantineColor;\n\n  /** Color of the grid and cursor lines, by default depends on color scheme */\n  gridColor?: MantineColor;\n\n  /** Chart label displayed next to the x axis */\n  label?: string;\n\n  /** Determines whether the tooltip should be displayed, `true` by default */\n  withTooltip?: boolean;\n\n  /** Function to format z axis values */\n  valueFormatter?: (value: number) => string;\n}\n\nexport type BubbleChartFactory = Factory<{\n  props: BubbleChartProps;\n  ref: HTMLDivElement;\n  stylesNames: BubbleChartStylesNames;\n  vars: BubbleChartCssVariables;\n}>;\n\nconst defaultProps: Partial<BubbleChartProps> = {\n  color: 'blue.6',\n  withTooltip: true,\n};\n\nconst varsResolver = createVarsResolver<BubbleChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const BubbleChart = factory<BubbleChartFactory>((_props, ref) => {\n  const props = useProps('BubbleChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    xAxisProps,\n    yAxisProps,\n    zAxisProps,\n    tooltipProps,\n    scatterProps,\n    color,\n    label,\n    withTooltip,\n    dataKey,\n    range,\n    valueFormatter,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<BubbleChartFactory>({\n    name: 'BubbleChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box ref={ref} {...getStyles('root')} {...others}>\n      <ResponsiveContainer>\n        <ScatterChart>\n          <XAxis\n            type=\"category\"\n            dataKey={dataKey.x}\n            interval={0}\n            tick={{ fontSize: 12, fill: 'currentColor' }}\n            tickLine={{ transform: 'translate(0, -6)', stroke: 'currentColor' }}\n            stroke=\"currentColor\"\n            {...getStyles('axis')}\n            {...xAxisProps}\n          />\n\n          <YAxis\n            type=\"number\"\n            dataKey={dataKey.y}\n            height={10}\n            width={label ? undefined : 0}\n            tick={false}\n            tickLine={false}\n            axisLine={false}\n            label={{ value: label, position: 'insideRight', fontSize: 12, fill: 'currentColor' }}\n            {...getStyles('axis')}\n            {...yAxisProps}\n          />\n\n          <ZAxis\n            type=\"number\"\n            dataKey={dataKey.z}\n            domain={getDomain(data, dataKey.z)}\n            range={range}\n            {...zAxisProps}\n          />\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={100}\n              isAnimationActive={false}\n              cursor={{ stroke: 'var(--chart-grid-color)', strokeWidth: 1, strokeDasharray: '3 3' }}\n              content={(payload) => (\n                <BubbleChartTooltip\n                  dataKey={dataKey}\n                  active={payload.active}\n                  payload={payload.payload}\n                  getStyles={getStyles}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          <Scatter\n            data={data}\n            fill={getThemeColor(color, theme)}\n            isAnimationActive={false}\n            {...scatterProps}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nBubbleChart.displayName = '@mantine/charts/BubbleChart';\nBubbleChart.classes = classes;\n", "import { useState } from 'react';\nimport {\n  Area,\n  AreaProps,\n  Bar,\n  BarProps,\n  CartesianGrid,\n  DotProps,\n  Label,\n  LabelList,\n  Legend,\n  Line,\n  LineProps,\n  ComposedChart as ReChartsCompositeChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport { PointLabel } from '../PointLabel/PointLabel';\nimport type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';\nimport classes from '../grid-chart.module.css';\n\nexport type CompositeChartCurveType =\n  | 'bump'\n  | 'linear'\n  | 'natural'\n  | 'monotone'\n  | 'step'\n  | 'stepBefore'\n  | 'stepAfter';\n\nexport interface CompositeChartSeries extends ChartSeries {\n  type: 'line' | 'area' | 'bar';\n  strokeDasharray?: string | number;\n}\n\nexport type CompositeChartStylesNames =\n  | 'line'\n  | 'area'\n  | 'bar'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type CompositeChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface CompositeChartProps\n  extends BoxProps,\n    Omit<GridChartBaseProps, 'orientation'>,\n    StylesApiProps<CompositeChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to display chart */\n  data: Record<string, any>[];\n\n  /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */\n  series: CompositeChartSeries[];\n\n  /** Type of the curve, `'monotone'` by default */\n  curveType?: CompositeChartCurveType;\n\n  /** Determines whether dots should be displayed, `true` by default */\n  withDots?: boolean;\n\n  /** Props passed down to all dots. Ignored if `withDots={false}` is set. */\n  dotProps?: Omit<DotProps, 'ref'>;\n\n  /** Props passed down to all active dots. Ignored if `withDots={false}` is set. */\n  activeDotProps?: Omit<DotProps, 'ref'>;\n\n  /** Stroke width for the chart lines, `2` by default */\n  strokeWidth?: number;\n\n  /** Determines whether points with `null` values should be connected, `true` by default */\n  connectNulls?: boolean;\n\n  /** Additional components that are rendered inside recharts `AreaChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `Line` component */\n  lineProps?:\n    | ((series: CompositeChartSeries) => Partial<Omit<LineProps, 'ref'>>)\n    | Partial<Omit<LineProps, 'ref'>>;\n\n  /** Props passed down to recharts `Area` component */\n  areaProps?:\n    | ((series: CompositeChartSeries) => Partial<Omit<AreaProps, 'ref'>>)\n    | Partial<Omit<AreaProps, 'ref'>>;\n\n  /** Props passed down to recharts `Bar` component */\n  barProps?:\n    | ((series: CompositeChartSeries) => Partial<Omit<BarProps, 'ref'>>)\n    | Partial<Omit<BarProps, 'ref'>>;\n\n  /** Determines whether each point should have associated label, `false` by default */\n  withPointLabels?: boolean;\n\n  /** Determines whether a label with bar value should be displayed on top of each bar, incompatible with `type=\"stacked\"` and `type=\"percent\"`, `false` by default */\n  withBarValueLabel?: boolean;\n\n  /** Sets minimum height of the bar in px, `0` by default */\n  minBarSize?: number;\n\n  /** Maximum bar width in px */\n  maxBarWidth?: number;\n\n  /** Props passed down to recharts `AreaChart` component */\n  composedChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsCompositeChart>;\n}\n\nexport type CompositeChartFactory = Factory<{\n  props: CompositeChartProps;\n  ref: HTMLDivElement;\n  stylesNames: CompositeChartStylesNames;\n  vars: CompositeChartCssVariables;\n}>;\n\nconst defaultProps: Partial<CompositeChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withTooltip: true,\n  tooltipAnimationDuration: 0,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  gridAxis: 'x',\n  withDots: true,\n  connectNulls: true,\n  strokeWidth: 2,\n  curveType: 'monotone',\n};\n\nconst varsResolver = createVarsResolver<CompositeChartFactory>(\n  (theme, { textColor, gridColor }) => ({\n    root: {\n      '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n      '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n    },\n  })\n);\n\nexport const CompositeChart = factory<CompositeChartFactory>((_props, ref) => {\n  const props = useProps('CompositeChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withLegend,\n    legendProps,\n    series,\n    onMouseLeave,\n    dataKey,\n    withTooltip,\n    withXAxis,\n    withYAxis,\n    gridAxis,\n    tickLine,\n    xAxisProps,\n    yAxisProps,\n    unit,\n    tooltipAnimationDuration,\n    strokeDasharray,\n    gridProps,\n    tooltipProps,\n    referenceLines,\n    withDots,\n    dotProps,\n    activeDotProps,\n    strokeWidth,\n    connectNulls,\n    curveType,\n    dir,\n    valueFormatter,\n    children,\n    lineProps,\n    xAxisLabel,\n    yAxisLabel,\n    withRightYAxis,\n    rightYAxisLabel,\n    rightYAxisProps,\n    withPointLabels,\n    areaProps,\n    barProps,\n    withBarValueLabel,\n    minBarSize,\n    maxBarWidth,\n    composedChartProps,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<CompositeChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<CompositeChartFactory>({\n    name: 'CompositeChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const lines = series.map((item) => {\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n\n    if (item.type === 'line') {\n      return (\n        <Line\n          {...getStyles('line')}\n          key={item.name}\n          name={item.name}\n          dataKey={item.name}\n          dot={\n            withDots\n              ? {\n                  fillOpacity: dimmed ? 0 : 1,\n                  strokeOpacity: dimmed ? 0 : 1,\n                  strokeWidth: 1,\n                  fill: color,\n                  stroke: color,\n                  ...dotProps,\n                }\n              : false\n          }\n          activeDot={\n            withDots\n              ? { fill: 'var(--mantine-color-white)', stroke: color, ...activeDotProps }\n              : false\n          }\n          fill={color}\n          stroke={color}\n          strokeWidth={strokeWidth}\n          isAnimationActive={false}\n          fillOpacity={dimmed ? 0 : 1}\n          strokeOpacity={dimmed ? 0.5 : 1}\n          connectNulls={connectNulls}\n          type={curveType}\n          strokeDasharray={item.strokeDasharray}\n          yAxisId={item.yAxisId || 'left'}\n          label={withPointLabels ? <PointLabel valueFormatter={valueFormatter} /> : undefined}\n          {...(typeof lineProps === 'function' ? lineProps(item) : lineProps)}\n        />\n      );\n    }\n\n    if (item.type === 'area') {\n      return (\n        <Area\n          {...getStyles('area')}\n          key={item.name}\n          name={item.name}\n          type={curveType}\n          dataKey={item.name}\n          fill={color}\n          strokeWidth={strokeWidth}\n          stroke={color}\n          isAnimationActive={false}\n          connectNulls={connectNulls}\n          dot={\n            withDots\n              ? {\n                  fillOpacity: dimmed ? 0 : 1,\n                  strokeOpacity: dimmed ? 0 : 1,\n                  strokeWidth: 1,\n                  fill: color,\n                  stroke: color,\n                  ...dotProps,\n                }\n              : false\n          }\n          activeDot={\n            withDots\n              ? {\n                  fill: theme.white,\n                  stroke: color,\n                  strokeWidth: 2,\n                  r: 4,\n                  ...activeDotProps,\n                }\n              : false\n          }\n          fillOpacity={dimmed ? 0 : 0.2}\n          strokeOpacity={dimmed ? 0.5 : 1}\n          strokeDasharray={item.strokeDasharray}\n          yAxisId={item.yAxisId || 'left'}\n          label={withPointLabels ? <PointLabel valueFormatter={valueFormatter} /> : undefined}\n          {...(typeof areaProps === 'function' ? areaProps(item) : areaProps)}\n        />\n      );\n    }\n\n    if (item.type === 'bar') {\n      return (\n        <Bar\n          {...getStyles('bar')}\n          key={item.name}\n          name={item.name}\n          dataKey={item.name}\n          fill={color}\n          stroke={color}\n          isAnimationActive={false}\n          fillOpacity={dimmed ? 0.1 : 1}\n          strokeOpacity={dimmed ? 0.2 : 0}\n          yAxisId={item.yAxisId || 'left'}\n          minPointSize={minBarSize}\n          {...(typeof barProps === 'function' ? barProps(item) : barProps)}\n        >\n          {withBarValueLabel && (\n            <LabelList\n              position=\"top\"\n              fontSize={12}\n              fill=\"var(--chart-bar-label-color, var(--mantine-color-dimmed))\"\n              formatter={valueFormatter}\n            />\n          )}\n        </Bar>\n      );\n    }\n\n    return null;\n  });\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        yAxisId={line.yAxisId || 'left'}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  const sharedYAxisProps = {\n    axisLine: false,\n    type: 'number' as const,\n    tickLine: withYTickLine ? { stroke: 'currentColor' } : false,\n    allowDecimals: true,\n    unit,\n    tickFormatter: valueFormatter,\n    ...getStyles('axis'),\n  };\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsCompositeChart\n          data={data}\n          maxBarSize={maxBarWidth}\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...composedChartProps}\n        >\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          <XAxis\n            hide={!withXAxis}\n            dataKey={dataKey}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n\n          <YAxis\n            yAxisId=\"left\"\n            orientation=\"left\"\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withYAxis}\n            {...sharedYAxisProps}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            tick={{ transform: 'translate(10, 0)', fontSize: 12, fill: 'currentColor' }}\n            hide={!withRightYAxis}\n            {...sharedYAxisProps}\n            {...rightYAxisProps}\n          >\n            {rightYAxisLabel && (\n              <Label\n                position=\"insideRight\"\n                angle={90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {rightYAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={tooltipAnimationDuration !== 0}\n              position={{ y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  label={label}\n                  payload={payload}\n                  unit={unit}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {lines}\n          {referenceLinesItems}\n          {children}\n        </ReChartsCompositeChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nCompositeChart.displayName = '@mantine/charts/CompositeChart';\nCompositeChart.classes = classes;\n", "'use client';\nvar classes = {\"root\":\"m_cd2bd9e5\",\"tooltip\":\"m_6bcc3420\"};\n\nexport { classes as default };\n//# sourceMappingURL=RadialBarChart.module.css.mjs.map\n", "import { useState } from 'react';\nimport {\n  Legend,\n  LegendProps,\n  RadialBar,\n  RadialBarProps,\n  RadialBarChart as ReChartsRadialBarChart,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  ColorSwatch,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  Group,\n  Paper,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend } from '../ChartLegend';\nimport classes from './RadialBarChart.module.css';\n\nexport type RadialBarChartStylesNames = 'root' | 'tooltip';\nexport type RadialBarChartCssVariables = {\n  root: '--chart-empty-background';\n};\n\nexport interface RadialBarChartProps\n  extends BoxProps,\n    StylesApiProps<RadialBarChartFactory>,\n    ElementProps<'div'> {\n  /** Chart data */\n  data: Record<string, any>[];\n\n  /** Key from data object to use as data key */\n  dataKey: string;\n\n  /** Size of bars in px, `20` by default */\n  barSize?: number;\n\n  /** Determines whether empty bars area should be visible, `true` by default */\n  withBackground?: boolean;\n\n  /** Determines whether labels should be displayed, `false` by default */\n  withLabels?: boolean;\n\n  /** Determines whether the legend should be displayed, `false` by default */\n  withLegend?: boolean;\n\n  /** Determines whether the tooltip should be displayed when one of the bars is hovered, `true` by default */\n  withTooltip?: boolean;\n\n  /** Color of the empty background, by default depends on the color scheme */\n  emptyBackgroundColor?: string;\n\n  /** Angle at which chart starts, `90` by default */\n  startAngle?: number;\n\n  /** Angle at which chart ends, `-270` by default */\n  endAngle?: number;\n\n  /** Props passed down to recharts RadialBar component */\n  radialBarProps?: Omit<RadialBarProps, 'ref'>;\n\n  /** Props passed down to recharts RadarChartChart component */\n  radialBarChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsRadialBarChart>;\n\n  /** Props passed down to recharts Legend component */\n  legendProps?: Omit<LegendProps, 'ref'>;\n\n  /** Props passed down to `Tooltip` recharts component */\n  tooltipProps?: Omit<TooltipProps<any, any>, 'ref'>;\n}\n\nexport type RadialBarChartFactory = Factory<{\n  props: RadialBarChartProps;\n  ref: HTMLDivElement;\n  stylesNames: RadialBarChartStylesNames;\n  vars: RadialBarChartCssVariables;\n}>;\n\nconst defaultProps: Partial<RadialBarChartProps> = {\n  barSize: 20,\n  startAngle: 90,\n  endAngle: -270,\n  withBackground: true,\n  withTooltip: true,\n};\n\nconst varsResolver = createVarsResolver<RadialBarChartFactory>(\n  (theme, { emptyBackgroundColor }) => ({\n    root: {\n      '--chart-empty-background': emptyBackgroundColor\n        ? getThemeColor(emptyBackgroundColor, theme)\n        : undefined,\n    },\n  })\n);\n\nexport const RadialBarChart = factory<RadialBarChartFactory>((_props, ref) => {\n  const props = useProps('RadialBarChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    barSize,\n    withBackground,\n    dataKey,\n    radialBarProps,\n    radialBarChartProps,\n    withLabels,\n    withLegend,\n    legendProps,\n    withTooltip,\n    tooltipProps,\n    startAngle,\n    endAngle,\n    ...others\n  } = props;\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n\n  const getStyles = useStyles<RadialBarChartFactory>({\n    name: 'RadialBarChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const theme = useMantineTheme();\n  const dataWithResolvedColor = data.map(({ color, ...item }) => {\n    const resolvedColor = getThemeColor(color, theme);\n\n    return {\n      ...item,\n      fill: resolvedColor,\n      fillOpacity: highlightedArea\n        ? highlightedArea === item.name\n          ? item.opacity || 1\n          : 0.05\n        : item.opacity || 1,\n    };\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<RadialBarChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  return (\n    <Box ref={ref} {...getStyles('root')} {...others}>\n      <ResponsiveContainer>\n        <ReChartsRadialBarChart\n          margin={{ top: 0, bottom: 0, left: 0, right: 0 }}\n          innerRadius=\"10%\"\n          outerRadius=\"100%\"\n          cx=\"50%\"\n          cy=\"50%\"\n          barSize={barSize}\n          startAngle={startAngle}\n          endAngle={endAngle}\n          data={dataWithResolvedColor}\n          {...radialBarChartProps}\n        >\n          <RadialBar\n            label={\n              withLabels\n                ? {\n                    position: 'insideStart',\n                    fill: 'var(--mantine-color-white)',\n                    fontSize: 12,\n                  }\n                : undefined\n            }\n            background={withBackground ? { fill: 'var(--chart-empty-background)' } : undefined}\n            dataKey={dataKey}\n            isAnimationActive={false}\n            {...radialBarProps}\n          />\n\n          {withLegend && (\n            <Legend\n              verticalAlign=\"bottom\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload?.map((item) => ({\n                    ...item,\n                    dataKey: (item.payload as any)?.name,\n                  }))}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'bottom'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  centered\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={0}\n              isAnimationActive={false}\n              cursor={{ stroke: 'var(--chart-cursor-color)' }}\n              content={({ payload }) => (\n                <Paper {...getStyles('tooltip')}>\n                  <Group gap=\"sm\">\n                    <ColorSwatch color={payload?.[0]?.payload.fill} size={12} withShadow={false} />\n                    <span>{payload?.[0]?.payload.name}</span>\n                  </Group>\n\n                  <span>{payload?.[0]?.payload[dataKey]}</span>\n                </Paper>\n              )}\n              {...tooltipProps}\n            />\n          )}\n        </ReChartsRadialBarChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nRadialBarChart.displayName = '@mantine/core/RadialBarChart';\nRadialBarChart.classes = classes;\n", "'use client';\nvar classes = {\"root\":\"m_80d531e7\"};\n\nexport { classes as default };\n//# sourceMappingURL=FunnelChart.module.css.mjs.map\n", "import {\n  Cell,\n  Funnel,\n  FunnelProps,\n  LabelList,\n  FunnelChart as RechartsFunnelChart,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartTooltip } from '../ChartTooltip/ChartTooltip';\nimport classes from './FunnelChart.module.css';\n\nexport interface FunnelChartCell {\n  key?: string | number;\n  name: string;\n  value: number;\n  color: MantineColor;\n}\n\nexport type FunnelChartStylesNames = 'root';\nexport type FunnelChartCssVariables = {\n  root: '--chart-stroke-color' | '--chart-labels-color' | '--chart-size';\n};\n\nexport interface FunnelChartProps\n  extends BoxProps,\n    StylesApiProps<FunnelChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to render chart */\n  data: FunnelChartCell[];\n\n  /** Determines whether the tooltip should be displayed when a section is hovered, `true` by default */\n  withTooltip?: boolean;\n\n  /** Tooltip animation duration in ms, `0` by default */\n  tooltipAnimationDuration?: number;\n\n  /** Props passed down to `Tooltip` recharts component */\n  tooltipProps?: Omit<TooltipProps<any, any>, 'ref'>;\n\n  /** Props passed down to recharts `Pie` component */\n  funnelProps?: Partial<Omit<FunnelProps, 'ref'>>;\n\n  /** Controls color of the segments stroke, by default depends on color scheme */\n  strokeColor?: MantineColor;\n\n  /** Controls text color of all labels, white by default */\n  labelColor?: MantineColor;\n\n  /** Controls chart width and height, `300` by default */\n  size?: number;\n\n  /** Controls width of segments stroke, `1` by default */\n  strokeWidth?: number;\n\n  /** Determines whether each segment should have associated label, `false` by default */\n  withLabels?: boolean;\n\n  /** Controls labels position relative to the segment, `'right'` by default */\n  labelsPosition?: 'right' | 'left' | 'inside';\n\n  /** A function to format values inside the tooltip and labels */\n  valueFormatter?: (value: number) => string;\n\n  /** Determines which data is displayed in the tooltip. `'all'` – display all values, `'segment'` – display only hovered segment. `'all'` by default. */\n  tooltipDataSource?: 'segment' | 'all';\n\n  /** Additional elements rendered inside `FunnelChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `FunnelChart` component */\n  funnelChartProps?: React.ComponentPropsWithoutRef<typeof RechartsFunnelChart>;\n}\n\nexport type FunnelChartFactory = Factory<{\n  props: FunnelChartProps;\n  ref: HTMLDivElement;\n  stylesNames: FunnelChartStylesNames;\n  vars: FunnelChartCssVariables;\n}>;\n\nconst defaultProps: Partial<FunnelChartProps> = {\n  withTooltip: true,\n  size: 300,\n  strokeWidth: 1,\n  withLabels: false,\n  labelsPosition: 'right',\n  tooltipDataSource: 'all',\n};\n\nconst varsResolver = createVarsResolver<FunnelChartFactory>(\n  (theme, { strokeColor, labelColor, size }) => ({\n    root: {\n      '--chart-stroke-color': strokeColor ? getThemeColor(strokeColor, theme) : undefined,\n      '--chart-labels-color': labelColor ? getThemeColor(labelColor, theme) : undefined,\n      '--chart-size': rem(size!),\n    },\n  })\n);\n\nexport const FunnelChart = factory<FunnelChartFactory>((_props, ref) => {\n  const props = useProps('FunnelChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withTooltip,\n    tooltipAnimationDuration,\n    tooltipProps,\n    strokeWidth,\n    withLabels,\n    size,\n    valueFormatter,\n    children,\n    funnelChartProps,\n    funnelProps,\n    labelsPosition,\n    tooltipDataSource,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<FunnelChartFactory>({\n    name: 'FunnelChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<FunnelChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  return (\n    <Box ref={ref} size={size} {...getStyles('root')} {...others}>\n      <ResponsiveContainer>\n        <RechartsFunnelChart {...funnelChartProps}>\n          <Funnel\n            data={data}\n            dataKey=\"value\"\n            isAnimationActive={false}\n            stroke=\"var(--chart-stroke-color, var(--mantine-color-body))\"\n            strokeWidth={strokeWidth}\n            {...funnelProps}\n          >\n            {withLabels && (\n              <LabelList\n                position={labelsPosition}\n                fill={\n                  labelsPosition === 'inside'\n                    ? 'var(--chart-labels-color, var(--mantine-color-white))'\n                    : 'var(--chart-labels-color, var(--mantine-color-dimmed))'\n                }\n                stroke=\"none\"\n                fontFamily=\"var(--mantine-font-family)\"\n                fontSize={14}\n                dataKey={(entry) => {\n                  return typeof valueFormatter === 'function'\n                    ? valueFormatter(entry.value as number)\n                    : entry.value;\n                }}\n              />\n            )}\n            {data.map((entry, index) => (\n              <Cell\n                key={index}\n                fill={getThemeColor(entry.color, theme)}\n                stroke=\"var(--chart-stroke-color, var(--mantine-color-body))\"\n                strokeWidth={strokeWidth}\n              />\n            ))}\n          </Funnel>\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={false}\n              content={({ payload }) => (\n                <ChartTooltip\n                  payload={data}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  type=\"radial\"\n                  segmentId={tooltipDataSource === 'segment' ? payload?.[0]?.name : undefined}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {children}\n        </RechartsFunnelChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nFunnelChart.displayName = '@mantine/charts/FunnelChart';\nFunnelChart.classes = classes;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,SAAS,gBAAgB,QAAsD;AACpF,MAAI,CAAC,QAAQ;AACX,WAAO,CAAC;EAAA;AAGV,SAAO,OAAO,OAA0B,CAAC,KAAK,SAAS;AACrD,UAAM,aAAa,KAAK,KAAK,OAAO,IAAI;AACxC,QAAI,cAAc,GAAG;AACnB,YAAM,MAAM,KAAK,KAAK,UAAU,aAAa,CAAC;AAC1C,UAAA,GAAG,IAAI,KAAK;AACT,aAAA;IAAA;AAEL,QAAA,KAAK,IAAI,IAAI,KAAK;AACf,WAAA;EACT,GAAG,CAAA,CAAE;AACP;;;AClBA,IAAI,UAAU,EAAC,WAAU,cAAa,gBAAe,cAAa,eAAc,cAAa,oBAAmB,cAAa,eAAc,cAAa,mBAAkB,cAAa,mBAAkB,cAAa,mBAAkB,aAAY;;;ACepP,SAAS,0BAA0B,SAAuD;AACjF,SAAA,QAAQ,IAAI,CAAC,SAAS;AAC3B,QAAI,CAAC,KAAK,WAAW,KAAK,QAAQ,KAAK,IAAI,GAAG;AACrC,aAAA;IAAA;AAET,UAAM,aAAa,KAAK,KAAK,OAAO,IAAI;AACxC,QAAI,cAAc,GAAG;AACnB,YAAM,aAAa,KAAK,KAAK,UAAU,GAAG,UAAU;AACpD,YAAM,gBAAgB,EAAE,GAAG,KAAK,QAAQ,UAAU,EAAE;AAC9C,YAAA,iBAAiB,OAAO,QAAQ,KAAK,OAAO,EAAE,OAAO,CAAC,KAAK,YAAY;AACrE,cAAA,CAAC,GAAG,CAAC,IAAI;AACR,eAAA,MAAM,aAAa,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,EAAE;MACnD,GAAG,CAAA,CAAE;AAEE,aAAA;QACL,GAAG;QACH,MAAM,KAAK,KAAK,UAAU,aAAa,CAAC;QACxC,SAAS;UACP,GAAG;UACH,GAAG;QAAA;MAEP;IAAA;AAEK,WAAA;EAAA,CACR;AACH;AAEgB,SAAA,+BAA+B,SAAgC,WAAoB;AACjG,QAAM,mBAAmB;IACvB,QAAQ,OAAO,CAAC,SAAS,KAAK,SAAS,UAAU,CAAC,KAAK,KAAK;EAC9D;AAEA,MAAI,CAAC,WAAW;AACP,WAAA;EAAA;AAGT,SAAO,iBAAiB,OAAO,CAAC,SAAS,KAAK,SAAS,SAAS;AAClE;AAEA,SAAS,QAAQ,MAA2B,MAAqC;AAC3E,MAAA,SAAS,YAAY,SAAS,WAAW;AAC3C,QAAI,MAAM,QAAQ,KAAK,KAAK,GAAG;AAC7B,aAAO,KAAK,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC;IAAA;AAErC,WAAO,KAAK;EAAA;AAGd,MAAI,MAAM,QAAQ,KAAK,QAAQ,KAAK,OAAO,CAAC,GAAG;AAC7C,WAAO,KAAK,QAAQ,KAAK,OAAO,EAAE,CAAC,IAAI,KAAK,QAAQ,KAAK,OAAO,EAAE,CAAC;EAAA;AAE9D,SAAA,KAAK,QAAQ,KAAK,IAAI;AAC/B;AA+CA,IAAM,eAA2C;EAC/C,MAAM;EACN,WAAW;AACb;AAEO,IAAM,eAAe,QAA6B,CAAC,QAAQ,QAAQ;;AACxE,QAAM,QAAQ,SAAS,gBAAgB,cAAc,MAAM;AACrD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,QAAQ,gBAAgB;AAE9B,QAAM,YAAY,UAA+B;IAC/C,MAAM;IACN;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;AAED,MAAI,CAAC,SAAS;AACL,WAAA;EAAA;AAGH,QAAA,kBAAkB,+BAA+B,SAAS,SAAS;AACzE,QAAM,eAAe,SAAS,aAAY,mBAAQ,CAAC,MAAT,mBAAY,YAAZ,mBAAqB,OAAO;AAChE,QAAA,SAAS,gBAAgB,MAAM;AACrC,QAAM,SAAS,SAAS;AAExB,QAAM,QAAQ,gBAAgB,IAAI,CAAC,aACjC,yBAAC,OAAiC,EAAA,aAAW,MAAO,GAAG,UAAU,aAAa,GAC5E,UAAA;QAAA,yBAAC,OAAK,EAAA,GAAG,UAAU,iBAAiB,GACjC,UAAA;MAAA,iBACE,wBAAA,OAAA,EAAK,GAAG,UAAU,kBAAkB,GACnC,cAAA;QAAC;QAAA;UACC,GAAG;UACH,MAAM,cAAc,KAAK,OAAO,KAAK;UACrC,OAAO;UACP,QAAQ;UACR,IAAI;UACJ,IAAI;QAAA;MAAA,EAER,CAAA;UAEF,wBAAC,OAAK,EAAA,GAAG,UAAU,iBAAiB,GAAI,UAAA,OAAO,KAAK,IAAI,KAAK,KAAK,KAAK,CAAA;IAAA,EACzE,CAAA;QACC,yBAAA,OAAA,EAAK,GAAG,UAAU,iBAAiB,GACjC,UAAA;MAAO,OAAA,mBAAmB,aACvB,eAAe,QAAQ,MAAM,IAAK,CAAC,IACnC,QAAQ,MAAM,IAAK;MACtB,QAAQ,KAAK;IAAA,EAChB,CAAA;EAAA,EAAA,IArBQ,6BAAM,QAAO,KAAK,IAsB5B,CACD;AAED,aACG,yBAAA,KAAA,EAAK,GAAG,UAAU,SAAS,GAAG,KAAK,CAAC,EAAE,KAAA,GAAQ,GAAG,GAAG,KAAW,GAAG,QAChE,UAAA;IAAA,cAAA,wBAAW,OAAK,EAAA,GAAG,UAAU,cAAc,GAAI,UAAO,OAAA,CAAA;QAAA,wBACtD,OAAK,EAAA,GAAG,UAAU,aAAa,GAAI,UAAM,MAAA,CAAA;EAAA,EAC5C,CAAA;AAEJ,CAAC;AAED,aAAa,cAAc;;;;;;ACnM3B,IAAIA,WAAU,EAAC,UAAS,YAAW,cAAa,cAAa,mBAAkB,cAAa,kBAAiB,aAAY;;;ACczH,SAAS,yBAAyB,SAAuD;AAChF,SAAA,QAAQ,IAAI,CAAC,SAAS;;AAC3B,UAAM,cAAa,UAAK,YAAL,mBAAc,MAAM,KAAK;AACrC,WAAA;MACL,GAAG;MACH,SAAS;MACT,SAAS;QACP,GAAG,KAAK;QACR,MAAM;QACN,SAAS;MAAA;IAEb;EAAA,CACD;AACH;AAEO,SAAS,8BAA8B,SAAgC;AACrE,SAAA,yBAAyB,QAAQ,OAAO,CAAC,SAAS,KAAK,UAAU,MAAM,CAAC;AACjF;AAiCA,IAAMC,gBAA0C,CAAC;AAE1C,IAAM,cAAc,QAA4B,CAAC,QAAQ,QAAQ;AACtE,QAAM,QAAQ,SAAS,eAAeA,eAAc,MAAM;AACpD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,YAAY,UAA8B;IAC9C,MAAM;IACN,SAAAC;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;AAED,MAAI,CAAC,SAAS;AACL,WAAA;EAAA;AAGH,QAAA,kBAAkB,8BAA8B,OAAO;AACvD,QAAA,SAAS,gBAAgB,MAAM;AAErC,QAAM,QAAQ,gBAAgB,IAAI,CAAC,MAAM,cACvC;IAAC;IAAA;MAEE,GAAG,UAAU,YAAY;MAC1B,cAAc,MAAM,YAAY,KAAK,OAAO;MAC5C,cAAc,MAAM,YAAY,IAAI;MACpC,sBAAoB,cAAc,SAAS;MAE3C,UAAA;YAAA;UAAC;UAAA;YACC,OAAO,KAAK;YACZ,MAAM;YACL,GAAG,UAAU,iBAAiB;YAC/B,YAAY;UAAA;QACd;YACA,yBAAC,KAAG,EAAA,GAAG,UAAU,gBAAgB,GAAI,UAAA,OAAO,KAAK,OAAO,KAAK,KAAK,QAAQ,CAAA;MAAA;IAAA;IAZrE;EAAA,CAcR;AAGC,aAAA;IAAC;IAAA;MACC;MACA,KAAK,CAAC,EAAE,UAAU,gBAAgB,SAAA,GAAY,GAAG;MAChD,GAAG,UAAU,QAAQ;MACrB,GAAG;MAEH,UAAA;IAAA;EACH;AAEJ,CAAC;AAED,YAAY,cAAc;;;;;;;;AC/HnB,SAAS,WAAW,EAAE,GAAG,GAAG,OAAO,eAAA,GAAmC;AAC3E,aAAA,yBACG,KAAE,EAAA,WAAW,aAAa,CAAC,IAAI,CAAC,KAC/B,cAAA;IAAC;IAAA;MACC,GAAG;MACH,GAAG;MACH,IAAI;MACJ,IAAI;MACJ,YAAW;MACX,MAAK;MACL,UAAU;MAET,UAAA,iBAAiB,eAAe,KAAM,IAAI;IAAA;EAAA,EAE/C,CAAA;AAEJ;;;;AChBO,SAAS,aAAa,EAAE,OAAO,IAAI,cAAc,YAAA,GAAkC;AACxF,aAEK,yBAAA,8BAAA,EAAA,UAAA,mBACE,0BAAA,kBAAA,EAAe,IAAQ,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,KAC9C,UAAA;QAAA,yBAAC,QAAA,EAAK,QAAO,MAAK,WAAW,OAAO,aAAa,YAAa,CAAA;QAAA,yBAC7D,QAAK,EAAA,QAAO,QAAO,WAAW,OAAO,aAAa,KAAM,CAAA;EAC3D,EAAA,CAAA,QAAA,yBAEC,kBAAe,EAAA,IAAQ,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,KAC9C,cAAA,yBAAC,QAAA,EAAK,WAAW,OAAO,aAAa,eAAe,IAAA,CAAK,EAAA,CAC3D,EAEJ,CAAA;AAEJ;AAEA,aAAa,cAAc;;;;ACfpB,SAAS,UAAU,EAAE,QAAQ,IAAI,QAAQ,YAAA,GAA+B;AAC7E,QAAM,QAAQ,gBAAgB;AAG5B,aAAA,0BAAC,kBAAe,EAAA,IAAQ,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,KAC9C,UAAA;QAAA;MAAC;MAAA;QACC;QACA,WAAW,cAAc,OAAO,CAAC,GAAG,KAAK;QACzC,aAAa,eAAe;MAAA;IAC9B;QACA;MAAC;MAAA;QACC;QACA,WAAW,cAAc,OAAO,CAAC,GAAG,KAAK;QACzC,aAAa,eAAe;MAAA;IAAA;EAC9B,EACF,CAAA;AAEJ;AAEA,UAAU,cAAc;;;ACpBjB,SAAS,eAAe,EAAE,MAAM,QAAA,GAAgC;AAC/D,QAAA,UAAU,KAAK,IAAI,GAAG,KAAK,IAAI,CAAC,SAAS,KAAK,OAAO,CAAC,CAAC;AACvD,QAAA,UAAU,KAAK,IAAI,GAAG,KAAK,IAAI,CAAC,SAAS,KAAK,OAAO,CAAC,CAAC;AAE7D,MAAI,WAAW,GAAG;AACT,WAAA;EAAA;AAET,MAAI,WAAW,GAAG;AACT,WAAA;EAAA;AAGT,SAAO,WAAW,UAAU;AAC9B;AAOO,SAAS,sBAAsB,EAAE,MAAM,OAAA,GAAsC;AAC9E,MAAA,OAAO,WAAW,GAAG;AACjB,UAAA,UAAU,OAAO,CAAC,EAAE;AAC1B,WAAO,eAAe,EAAE,MAAM,QAAA,CAAS;EAAA;AAGlC,SAAA;AACT;;;ACjCA,IAAIC,WAAU,EAAC,QAAO,cAAa,aAAY,cAAa,QAAO,cAAa,QAAO,cAAa,aAAY,cAAa,WAAU,aAAY;;;ACsCnJ,SAAS,eAAe,OAAe;AACrC,SAAO,IAAI,QAAQ,KAAK,QAAQ,CAAC,CAAC;AACpC;AA2FA,IAAMC,gBAAwC;EAC5C,WAAW;EACX,WAAW;EACX,UAAU;EACV,aAAa;EACb,cAAc;EACd,aAAa;EACb,0BAA0B;EAC1B,aAAa;EACb,UAAU;EACV,iBAAiB;EACjB,WAAW;EACX,UAAU;EACV,MAAM;EACN,aAAa,CAAC,WAAW,OAAO;EAChC,aAAa;AACf;AAEA,IAAM,eAAe,mBAAqC,CAAC,OAAO,EAAE,WAAW,UAAA,OAAiB;EAC9F,MAAM;IACJ,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;IACpE,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;EAAA;AAExE,EAAE;AAEK,IAAMC,aAAY,QAA0B,CAAC,QAAQ,QAAQ;AAClE,QAAM,QAAQ,SAAS,aAAaD,eAAc,MAAM;AAClD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,QAAQ,gBAAgB;AAC9B,QAAM,aAAS,oBAAM;AACf,QAAA,UAAU,GAAG,MAAM;AACzB,QAAM,gBAAgB,aAAa,WAAW,aAAa,OAAO,aAAa;AAC/E,QAAM,gBAAgB,aAAa,WAAW,aAAa,OAAO,aAAa;AACzE,QAAA,qBAAqB,4BAA4B,KAAK;AAC5D,QAAM,gBAAgB,OAAO,iBAAiB,YAAY,eAAe,SAAS;AAC5E,QAAA,UAAU,SAAS,aAAa,SAAS;AAC/C,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,uBAAwB,IAAI;AAC1E,QAAM,kBAAkB,oBAAoB;AACtC,QAAA,mBAAmB,CAAC,UAA4C;AACpE,uBAAmB,IAAI;AACvB,iDAAe;EACjB;AAEA,QAAM,EAAE,oBAAoB,eAAe,IAAI,qBAAuC;IACpF;IACA;IACA;EAAA,CACD;AAED,QAAM,YAAY,UAA4B;IAC5C,MAAM;IACN,SAAAE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;AAED,QAAM,YAAY,OAAO,IAAI,CAAC,SAAS;AACrC,UAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AACvC,UAAA,SAAS,mBAAmB,oBAAoB,KAAK;AAEzD,eAAA;MAAC;MAAA;QACE,GAAG,UAAU,MAAM;QACpB,WAAW,EAAE,MAAM,MAAM,OAAO,QAAQ,OAAO,aAAa,GAAG,GAAG,GAAG,GAAG,eAAe;QACvF,KAAK,EAAE,MAAM,OAAO,aAAa,SAAS,IAAI,GAAG,aAAa,GAAG,GAAG,GAAG,GAAG,SAAS;QACnF,KAAK,KAAK;QACV,MAAM,KAAK;QACX,MAAM;QACN,SAAS,KAAK;QACd,MAAK;QACL;QACA,QAAO;QACP,mBAAmB;QACnB;QACA,SAAS,UAAU,eAAe;QAClC,SAAS,KAAK,WAAW;QACxB,GAAI,OAAO,cAAc,aAAa,UAAU,IAAI,IAAI;MAAA;IAC3D;EAAA,CAEH;AAED,QAAM,QAAQ,OAAO,IAAI,CAAC,SAAS;AAC3B,UAAA,KAAK,GAAG,MAAM,IAAI,KAAK,MAAM,QAAQ,iBAAiB,EAAE,CAAC;AAC/D,UAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AACvC,UAAA,SAAS,mBAAmB,oBAAoB,KAAK;AAE3D,eAAA,0BACG,uBACC,EAAA,UAAA;UAAA,yBAAC,QACC,EAAA,cAAA;QAAC;QAAA;UACC;UACA,cAAc;UACd;UACA;QAAA;MAAA,EAEJ,CAAA;UACA;QAAC;QAAA;UACE,GAAG,UAAU,MAAM;UACpB,WAAW;UACX,KAAK;UACL,MAAM,KAAK;UACX,MAAM;UACN,SAAS,KAAK;UACd,MAAM,SAAS,UAAU,QAAQ,OAAO,MAAM,QAAQ,EAAE;UACxD;UACA,QAAQ;UACR,mBAAmB;UACnB;UACA,SAAS,UAAU,UAAU;UAC7B,aAAa,SAAS,IAAI;UAC1B,eAAe,SAAS,MAAM;UAC9B,iBAAiB,KAAK;UACtB,SAAS,KAAK,WAAW;UACzB,OAAO,sBAAmB,yBAAA,YAAA,EAAW,eAAA,CAAgC,IAAK;UACzE,GAAI,OAAO,cAAc,aAAa,UAAU,IAAI,IAAI;QAAA;MAAA;IAC3D,EAAA,GA5Ba,KAAK,IA6BpB;EAAA,CAEH;AAED,QAAM,sBAAsB,iDAAgB,IAAI,CAAC,MAAM,UAAU;AAC/D,UAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AAE3C,eAAA;MAAC;MAAA;QAEC,QAAQ,KAAK,QAAQ,QAAQ;QAC7B,aAAa;QACb,SAAS,KAAK,WAAW;QACxB,GAAG;QACJ,OAAO;UACL,OAAO,KAAK;UACZ,MAAM,KAAK,QAAQ,QAAQ;UAC3B,UAAU;UACV,UAAU,KAAK,iBAAiB;QAClC;QACC,GAAG,UAAU,eAAe;MAAA;MAXxB;IAYP;EAAA;AAIE,QAAA,gBAAgB,SAAS,YAAY,iBAAiB;AAE5D,QAAM,mBAAmB;IACvB,UAAU;IACV,GAAI,gBAAgB,aAChB,EAAE,SAAS,MAAM,WAAoB,IACrC,EAAE,MAAM,SAAkB;IAC9B,UAAU,gBAAgB,EAAE,QAAQ,eAAmB,IAAA;IACvD,eAAe;IACf;IACA,eAAe,gBAAgB,aAAa,SAAY;IACxD,GAAG,UAAU,MAAM;EACrB;AAGE,aAAA;IAAC;IAAA;MACC;MACC,GAAG,UAAU,MAAM;MACpB,cAAc;MACd,KAAK,OAAO;MACX,GAAG;MAEJ,cAAC,yBAAA,qBAAA,EAAqB,GAAG,UAAU,WAAW,GAC5C,cAAA;QAACC;QAAA;UACC;UACA,aAAa,SAAS,YAAY,WAAW;UAC7C,QAAQ;UACR,QAAQ;YACN,QAAQ,aAAa,KAAK;YAC1B,MAAM,aAAa,KAAK;YACxB,OAAO,aAAa,IAAI;UAC1B;UACC,GAAG;UAEH,UAAA;YAAA;YACA,kBACC;cAAC;cAAA;gBACC,eAAc;gBACd,SAAS,CAAC,gBACR;kBAAC;kBAAA;oBACC,SAAS,QAAQ;oBACjB,aAAa;oBACb,iBAAgB,2CAAa,kBAAiB;oBAC9C,YAAY;oBACZ,QAAQ;oBACR;kBAAA;gBACF;gBAED,GAAG;cAAA;YACN;gBAGF;cAAC;cAAA;gBACC;gBACA,UAAU,aAAa,OAAO,aAAa;gBAC3C,YAAY,aAAa,OAAO,aAAa;gBAC5C,GAAG,UAAU,MAAM;gBACnB,GAAG;cAAA;YACN;gBAEA;cAAC;cAAA;gBACC,MAAM,CAAC;gBACN,GAAI,gBAAgB,aAAa,EAAE,MAAM,SAAS,IAAI,EAAE,QAAQ;gBACjE,MAAM,EAAE,WAAW,oBAAoB,UAAU,IAAI,MAAM,eAAe;gBAC1E,QAAO;gBACP,UAAS;gBACT,UAAU,gBAAgB,EAAE,QAAQ,eAAmB,IAAA;gBACvD,YAAY;gBACZ,eAAe,gBAAgB,aAAa,gBAAgB;gBAC3D,GAAG,UAAU,MAAM;gBACnB,GAAG;gBAEH,UAAA;kBAAA,kBACE,yBAAA,OAAA,EAAM,UAAS,gBAAe,QAAQ,KAAK,UAAU,IAAK,GAAG,UAAU,WAAW,GAChF,UACH,WAAA,CAAA;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC,SAAQ;gBACR,aAAY;gBACZ,MAAM,EAAE,WAAW,qBAAqB,UAAU,IAAI,MAAM,eAAe;gBAC3E,MAAM,CAAC;gBACN,GAAG;gBACH,GAAG;gBAEH,UAAA;kBACC,kBAAA;oBAAC;oBAAA;sBACC,UAAS;sBACT,OAAO;sBACP,YAAW;sBACX,UAAU;sBACV,QAAQ;sBACP,GAAG,UAAU,WAAW;sBAExB,UAAA;oBAAA;kBACH;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC,SAAQ;gBACR,aAAY;gBACZ,MAAM,EAAE,WAAW,oBAAoB,UAAU,IAAI,MAAM,eAAe;gBAC1E,MAAM,CAAC;gBACN,GAAG;gBACH,GAAG;gBAEH,UAAA;kBACC,uBAAA;oBAAC;oBAAA;sBACC,UAAS;sBACT,OAAO;sBACP,YAAW;sBACX,UAAU;sBACV,QAAQ;sBACP,GAAG,UAAU,WAAW;sBAExB,UAAA;oBAAA;kBACH;kBAED,yCAAY;gBAAA;cAAA;YACf;YAEC,mBACC;cAAC;cAAA;gBACC,mBAAmB;gBACnB;gBACA,UAAU,gBAAgB,aAAa,CAAK,IAAA,EAAE,GAAG,EAAE;gBACnD,QAAQ;kBACN,QAAQ;kBACR,aAAa;kBACb;gBACF;gBACA,SAAS,CAAC,EAAE,OAAO,QACjB,UAAA;kBAAC;kBAAA;oBACC;oBACA;oBACA;oBACA,YAAY;oBACZ,QAAQ;oBACR;oBACA;kBAAA;gBACF;gBAED,GAAG;cAAA;YACN;YAGD,SAAS,eACR,yBAAC,QACC,EAAA,cAAA;cAAC;cAAA;gBACC,QAAQ;gBACR,IAAI;gBACJ,QAAQ,eAAe,sBAAsB,EAAE,MAAa,OAAA,CAAQ;gBACpE;cAAA;YAAA,EAEJ,CAAA;YAGD;YACA,YAAY;YACZ;UAAA;QAAA;MAAA,EAEL,CAAA;IAAA;EACF;AAEJ,CAAC;AAEDF,WAAU,UAAUC;AACpBD,WAAU,cAAc;;;;;AC/cxB,SAASG,gBAAe,OAAe;AACrC,SAAO,IAAI,QAAQ,KAAK,QAAQ,CAAC,CAAC;AACpC;AAiFA,IAAMC,gBAAuC;EAC3C,WAAW;EACX,WAAW;EACX,aAAa;EACb,0BAA0B;EAC1B,aAAa;EACb,UAAU;EACV,iBAAiB;EACjB,UAAU;EACV,MAAM;AACR;AAEA,IAAMC,gBAAe;EACnB,CAAC,OAAO,EAAE,WAAW,WAAW,YAAY,cAAA,OAAqB;IAC/D,MAAM;MACJ,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;MACpE,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;MACpE,uBAAuB,aAAa,cAAc,YAAY,KAAK,IAAI;MACvE,2BAA2B,gBAAgB,cAAc,eAAe,KAAK,IAAI;IAAA;EAErF;AACF;AAEA,SAAS,yBAAyB,eAAsC,SAAiB;AACvF,MAAI,QAAgB;AACpB,MAAI,MAAc;AACX,SAAA,cAAc,IAAI,CAAC,SAAS;AACjC,QAAI,KAAK,YAAY;AACnB,iBAAW,QAAQ,MAAM;AACvB,YAAI,OAAO,KAAK,IAAI,MAAM,YAAY,SAAS,SAAS;AACtD,eAAK,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC;QAAA;MAC7B;IACF,OACK;AACL,iBAAW,QAAQ,MAAM;AACvB,YAAI,OAAO,KAAK,IAAI,MAAM,YAAY,SAAS,SAAS;AACtD,iBAAO,KAAK,IAAI;AAChB,eAAK,IAAI,IAAI,CAAC,OAAO,GAAG;AAChB,kBAAA;QAAA;MACV;IACF;AAEK,WAAA;EAAA,CACR;AACH;AAEA,SAAS,WAAW,UAAqC,QAAwB;AAC3E,MAAA,OAAO,aAAa,YAAY;AAC3B,WAAA,SAAS,MAAM,EAAE;EAAA;AAG1B,SAAO,qCAAU;AACnB;AAEO,IAAMC,YAAW,QAAyB,CAAC,QAAQ,QAAQ;AAChE,QAAM,QAAQ,SAAS,YAAYF,eAAc,MAAM;AACjD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,QAAQ,gBAAgB;AAC9B,QAAM,gBAAgB,aAAa,WAAW,aAAa,OAAO,aAAa;AAC/E,QAAM,gBAAgB,aAAa,WAAW,aAAa,OAAO,aAAa;AAC/E,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,wBAAwB,IAAI;AAC1E,QAAM,kBAAkB,oBAAoB;AACtC,QAAA,UAAU,SAAS,aAAa,SAAS;AACzC,QAAA,gBAAgB,SAAS,YAAYD,kBAAiB;AAEtD,QAAA,mBAAmB,CAAC,UAA4C;AACpE,uBAAmB,IAAI;AACvB,iDAAe;EACjB;AACA,QAAM,EAAE,oBAAoB,eAAe,IAAI,qBAAsC;IACnF;IACA;IACA;EAAA,CACD;AAED,QAAM,YAAY,SAAS,cAAc,yBAAyB,MAAM,OAAO,IAAI;AAEnF,QAAM,YAAY,UAA2B;IAC3C,MAAM;IACN,SAAAI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAF;EAAA,CACD;AAED,QAAM,OAAO,OAAO,IAAI,CAAC,SAAS;AAChC,UAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AACvC,UAAA,SAAS,mBAAmB,oBAAoB,KAAK;AAGzD,eAAA;MAAC;MAAA;QACE,GAAG,UAAU,KAAK;QACnB,KAAK,KAAK;QACV,MAAM,KAAK;QACX,SAAS,KAAK;QACd,MAAM;QACN,QAAQ;QACR,mBAAmB;QACnB,aAAa,SAAS,MAAM;QAC5B,eAAe,SAAS,MAAM;QAC9B,SAAS,UAAU,UAAU,KAAK,WAAW;QAC7C,SAAS,KAAK,WAAW;QACzB,cAAc;QACb,GAAI,OAAO,aAAa,aAAa,SAAS,IAAI,IAAI;MAAA;MAEtD,UAAU,IAAI,CAAC,OAAO,UAAU;AACzB,cAAA,YAAY,MAAM,QACpB,cAAc,MAAM,OAAO,KAAK,IAChC,OAAO,gBAAgB,aACrB,cAAc,YAAY,MAAM,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,IACxD,WAAW,UAAU,IAAI,KAAK;AAEpC,mBAAA,yBAAQ,MAA2B,EAAA,MAAM,UAAvB,GAAA,QAAQ,KAAK,EAAqB;MAAA,CACrD;MACA,yBACC;QAAC;QAAA;UACC,UAAU,gBAAgB,aAAa,UAAU;UACjD,UAAU;UACV,MAAK;UACL,WAAW;UACV,GAAI,OAAO,oBAAoB,aAAa,gBAAgB,IAAI,IAAI;QAAA;MAAA;IAG3E;EAAA,CAEH;AAED,QAAM,sBAAsB,iDAAgB,IAAI,CAAC,MAAM,UAAU;AAC/D,UAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AAE3C,eAAA;MAAC;MAAA;QAEC,QAAQ,KAAK,QAAQ,QAAQ;QAC7B,aAAa;QACb,SAAS,KAAK,WAAW;QACxB,GAAG;QACJ,OAAO;UACL,OAAO,KAAK;UACZ,MAAM,KAAK,QAAQ,QAAQ;UAC3B,UAAU;UACV,UAAU,KAAK,iBAAiB;QAClC;QACC,GAAG,UAAU,eAAe;MAAA;MAXxB;IAYP;EAAA;AAIJ,QAAM,mBAAmB;IACvB,UAAU;IACV,GAAI,gBAAgB,aAChB,EAAE,SAAS,MAAM,WAAoB,IACrC,EAAE,MAAM,SAAkB;IAC9B,UAAU,gBAAgB,EAAE,QAAQ,eAAmB,IAAA;IACvD,eAAe;IACf;IACA,eAAe,gBAAgB,aAAa,SAAY;IACxD,GAAG,UAAU,MAAM;EACrB;AAGE,aAAA;IAAC;IAAA;MACC;MACC,GAAG,UAAU,MAAM;MACpB,cAAc;MACd,KAAK,OAAO;MACZ,KAAK,CAAC,EAAE,YAAA,GAAe,GAAG;MACzB,GAAG;MAEJ,cAAC,yBAAA,qBAAA,EAAqB,GAAG,UAAU,WAAW,GAC5C,cAAA;QAACG;QAAA;UACC,MAAM;UACN,aAAa,SAAS,YAAY,WAAW;UAC7C,QAAQ;UACR,YAAY;UACZ,QAAQ;YACN,QAAQ,aAAa,KAAK;YAC1B,MAAM,aAAa,KAAK;YACxB,OAAO,aAAa,IAAI;UAC1B;UACC,GAAG;UAEH,UAAA;YACC,kBAAA;cAAC;cAAA;gBACC,eAAc;gBACd,SAAS,CAAC,gBACR;kBAAC;kBAAA;oBACC,SAAS,QAAQ;oBACjB,aAAa;oBACb,iBAAgB,2CAAa,kBAAiB;oBAC9C,YAAY;oBACZ,QAAQ;oBACR;oBACA,WAAW,SAAS;kBAAA;gBACtB;gBAED,GAAG;cAAA;YACN;gBAGF;cAAC;cAAA;gBACC,MAAM,CAAC;gBACN,GAAI,gBAAgB,aAAa,EAAE,MAAM,SAAS,IAAI,EAAE,QAAQ;gBACjE,MAAM,EAAE,WAAW,oBAAoB,UAAU,IAAI,MAAM,eAAe;gBAC1E,QAAO;gBACP,UAAS;gBACT,UAAU,gBAAgB,EAAE,QAAQ,eAAmB,IAAA;gBACvD,YAAY;gBACZ,eAAe,gBAAgB,aAAa,gBAAgB;gBAC3D,GAAG,UAAU,MAAM;gBACnB,GAAG;gBAEH,UAAA;kBAAA,kBACE,yBAAA,OAAA,EAAM,UAAS,gBAAe,QAAQ,KAAK,UAAU,IAAK,GAAG,UAAU,WAAW,GAChF,UACH,WAAA,CAAA;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC,SAAQ;gBACR,aAAY;gBACZ,MAAM,EAAE,WAAW,qBAAqB,UAAU,IAAI,MAAM,eAAe;gBAC3E,MAAM,CAAC;gBACN,GAAG;gBACH,GAAG;gBAEH,UAAA;kBACC,kBAAA;oBAAC;oBAAA;sBACC,UAAS;sBACT,OAAO;sBACP,YAAW;sBACX,UAAU;sBACV,QAAQ;sBACP,GAAG,UAAU,WAAW;sBAExB,UAAA;oBAAA;kBACH;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC,SAAQ;gBACR,aAAY;gBACZ,MAAM,EAAE,WAAW,oBAAoB,UAAU,IAAI,MAAM,eAAe;gBAC1E,MAAM,CAAC;gBACN,GAAG;gBACH,GAAG;gBAEH,UAAA;kBACC,uBAAA;oBAAC;oBAAA;sBACC,UAAS;sBACT,OAAO;sBACP,YAAW;sBACX,UAAU;sBACV,QAAQ;sBACP,GAAG,UAAU,WAAW;sBAExB,UAAA;oBAAA;kBACH;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC;gBACA,UAAU,aAAa,OAAO,aAAa;gBAC3C,YAAY,aAAa,OAAO,aAAa;gBAC5C,GAAG,UAAU,MAAM;gBACnB,GAAG;cAAA;YACN;YAEC,mBACC;cAAC;cAAA;gBACC,mBAAmB;gBACnB,mBAAmB,6BAA6B;gBAChD,UAAU,gBAAgB,aAAa,CAAK,IAAA,EAAE,GAAG,EAAE;gBACnD,QAAQ;kBACN,QAAQ;kBACR,aAAa;kBACb;kBACA,MAAM;gBACR;gBACA,SAAS,CAAC,EAAE,OAAO,QACjB,UAAA;kBAAC;kBAAA;oBACC;oBACA;oBACA,MAAM,SAAS,cAAc,YAAY;oBACzC;oBACA,YAAY;oBACZ,QAAQ;oBACR;oBACA;kBAAA;gBACF;gBAED,GAAG;cAAA;YACN;YAGD;YACA;YACA;UAAA;QAAA;MAAA,EAEL,CAAA;IAAA;EACF;AAEJ,CAAC;AAEDF,UAAS,cAAc;AACvBA,UAAS,UAAUC;;;;;ACpWnB,IAAME,gBAAwC;EAC5C,WAAW;EACX,WAAW;EACX,aAAa;EACb,0BAA0B;EAC1B,aAAa;EACb,UAAU;EACV,iBAAiB;EACjB,UAAU;EACV,UAAU;EACV,cAAc;EACd,aAAa;EACb,WAAW;EACX,eAAe;IACb,EAAE,QAAQ,GAAG,OAAO,MAAM;IAC1B,EAAE,QAAQ,KAAK,OAAO,OAAO;EAAA;AAEjC;AAEA,IAAMC,gBAAe,mBAAqC,CAAC,OAAO,EAAE,WAAW,UAAA,OAAiB;EAC9F,MAAM;IACJ,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;IACpE,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;EAAA;AAExE,EAAE;AAEK,IAAMC,aAAY,QAA0B,CAAC,QAAQ,QAAQ;AAClE,QAAM,QAAQ,SAAS,aAAaF,eAAc,MAAM;AAClD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,QAAQ,gBAAgB;AAC9B,QAAM,gBAAgB,aAAa,WAAW,aAAa,OAAO,aAAa;AAC/E,QAAM,gBAAgB,aAAa,WAAW,aAAa,OAAO,aAAa;AAC/E,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,wBAAwB,IAAI;AAC1E,QAAM,kBAAkB,oBAAoB;AACtC,QAAA,mBAAmB,CAAC,UAA4C;AACpE,uBAAmB,IAAI;AACvB,iDAAe;EACjB;AACA,QAAM,EAAE,oBAAoB,eAAe,IAAI,qBAAuC;IACpF;IACA;IACA;EAAA,CACD;AAED,QAAM,YAAY,UAA4B;IAC5C,MAAM;IACN,SAAAG;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAF;EAAA,CACD;AAED,QAAM,KAAK,MAAM;AACX,QAAA,aAAa,uBAAuB,EAAE;AAC5C,QAAM,QAAQ,+CAAe,IAAI,CAAC,aAChC;IAAC;IAAA;MAEC,QAAQ,GAAG,KAAK,MAAM;MACtB,WAAW,cAAc,KAAK,OAAO,KAAK;IAAA;IAFrC,KAAK;EAAA;AAMd,QAAM,QAAQ,OAAO,IAAI,CAAC,SAAS;AACjC,UAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AACvC,UAAA,SAAS,mBAAmB,oBAAoB,KAAK;AAGzD,eAAA;MAAC;MAAA;QACE,GAAG,UAAU,MAAM;QACpB,KAAK,KAAK;QACV,MAAM,KAAK;QACX,SAAS,KAAK;QACd,KACE,WACI;UACE,aAAa,SAAS,IAAI;UAC1B,eAAe,SAAS,IAAI;UAC5B,aAAa;UACb,MAAM,SAAS,aAAa,gCAAgC;UAC5D,QAAQ,SAAS,aAAa,UAAU;UACxC,GAAG;QAAA,IAEL;QAEN,WACE,WACI;UACE,MAAM,SAAS,aAAa,gCAAgC;UAC5D,QAAQ,SAAS,aAAa,UAAU;UACxC,GAAG;QAAA,IAEL;QAEN,MAAM;QACN,QAAQ,SAAS,aAAa,QAAQ,UAAU,MAAM;QACtD;QACA,mBAAmB;QACnB,aAAa,SAAS,IAAI;QAC1B,eAAe,SAAS,MAAM;QAC9B;QACA,MAAM;QACN,iBAAiB,KAAK;QACtB,SAAS,KAAK,WAAW;QACzB,OAAO,sBAAmB,yBAAA,YAAA,EAAW,eAAA,CAAgC,IAAK;QACzE,GAAI,OAAO,cAAc,aAAa,UAAU,IAAI,IAAI;MAAA;IAC3D;EAAA,CAEH;AAED,QAAM,sBAAsB,iDAAgB,IAAI,CAAC,MAAM,UAAU;AAC/D,UAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AAE3C,eAAA;MAAC;MAAA;QAEC,QAAQ,KAAK,QAAQ,QAAQ;QAC7B,aAAa;QACb,SAAS,KAAK,WAAW;QACxB,GAAG;QACJ,OAAO;UACL,OAAO,KAAK;UACZ,MAAM,KAAK,QAAQ,QAAQ;UAC3B,UAAU;UACV,UAAU,KAAK,iBAAiB;QAClC;QACC,GAAG,UAAU,eAAe;MAAA;MAXxB;IAYP;EAAA;AAIJ,QAAM,mBAAmB;IACvB,UAAU;IACV,GAAI,gBAAgB,aAChB,EAAE,SAAS,MAAM,WAAoB,IACrC,EAAE,MAAM,SAAkB;IAC9B,UAAU,gBAAgB,EAAE,QAAQ,eAAmB,IAAA;IACvD,eAAe;IACf;IACA,eAAe,gBAAgB,aAAa,SAAY;IACxD,GAAG,UAAU,MAAM;EACrB;AAGE,aAAA;IAAC;IAAA;MACC;MACC,GAAG,UAAU,MAAM;MACpB,cAAc;MACd,KAAK,OAAO;MACX,GAAG;MAEJ,cAAC,yBAAA,qBAAA,EAAqB,GAAG,UAAU,WAAW,GAC5C,cAAA;QAACG;QAAA;UACC;UACA,QAAQ;UACR,QAAQ;YACN,QAAQ,aAAa,KAAK;YAC1B,MAAM,aAAa,KAAK;YACxB,OAAO,aAAa,IAAI;UAC1B;UACC,GAAG;UAEH,UAAA;YAAA,SAAS,kBACP,yBAAA,QAAA,EACC,cAAC,yBAAA,kBAAA,EAAe,IAAI,YAAY,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,KACrD,UAAA,MACH,CAAA,EACF,CAAA;YAGD,kBACC;cAAC;cAAA;gBACC,eAAc;gBACd,SAAS,CAAC,gBACR;kBAAC;kBAAA;oBACC,SAAS,QAAQ;oBACjB,aAAa;oBACb,iBAAgB,2CAAa,kBAAiB;oBAC9C,YAAY;oBACZ,QAAQ;oBACR;oBACA,WAAW,SAAS;kBAAA;gBACtB;gBAED,GAAG;cAAA;YACN;gBAGF;cAAC;cAAA;gBACC,MAAM,CAAC;gBACN,GAAI,gBAAgB,aAAa,EAAE,MAAM,SAAS,IAAI,EAAE,QAAQ;gBACjE,MAAM,EAAE,WAAW,oBAAoB,UAAU,IAAI,MAAM,eAAe;gBAC1E,QAAO;gBACP,UAAS;gBACT,UAAU,gBAAgB,EAAE,QAAQ,eAAmB,IAAA;gBACvD,YAAY;gBACZ,eAAe,gBAAgB,aAAa,iBAAiB;gBAC5D,GAAG,UAAU,MAAM;gBACnB,GAAG;gBAEH,UAAA;kBAAA,kBACE,yBAAA,OAAA,EAAM,UAAS,gBAAe,QAAQ,KAAK,UAAU,IAAK,GAAG,UAAU,WAAW,GAChF,UACH,WAAA,CAAA;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC,SAAQ;gBACR,aAAY;gBACZ,MAAM,EAAE,WAAW,qBAAqB,UAAU,IAAI,MAAM,eAAe;gBAC3E,MAAM,CAAC;gBACN,GAAG;gBACH,GAAG;gBAEH,UAAA;kBACC,kBAAA;oBAAC;oBAAA;sBACC,UAAS;sBACT,OAAO;sBACP,YAAW;sBACX,UAAU;sBACV,QAAQ;sBACP,GAAG,UAAU,WAAW;sBAExB,UAAA;oBAAA;kBACH;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC,SAAQ;gBACR,aAAY;gBACZ,MAAM,EAAE,WAAW,oBAAoB,UAAU,IAAI,MAAM,eAAe;gBAC1E,MAAM,CAAC;gBACN,GAAG;gBACH,GAAG;gBAEH,UAAA;kBACC,uBAAA;oBAAC;oBAAA;sBACC,UAAS;sBACT,OAAO;sBACP,YAAW;sBACX,UAAU;sBACV,QAAQ;sBACP,GAAG,UAAU,WAAW;sBAExB,UAAA;oBAAA;kBACH;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC;gBACA,UAAU,aAAa,OAAO,aAAa;gBAC3C,YAAY,aAAa,OAAO,aAAa;gBAC5C,GAAG,UAAU,MAAM;gBACnB,GAAG;cAAA;YACN;YAEC,mBACC;cAAC;cAAA;gBACC,mBAAmB;gBACnB,mBAAmB,6BAA6B;gBAChD,UAAU,gBAAgB,aAAa,CAAK,IAAA,EAAE,GAAG,EAAE;gBACnD,QAAQ;kBACN,QAAQ;kBACR,aAAa;kBACb;gBACF;gBACA,SAAS,CAAC,EAAE,OAAO,QACjB,UAAA;kBAAC;kBAAA;oBACC;oBACA;oBACA;oBACA,YAAY;oBACZ,QAAQ;oBACR;oBACA;oBACA,WAAW,SAAS;kBAAA;gBACtB;gBAED,GAAG;cAAA;YACN;YAGD;YACA;YACA;UAAA;QAAA;MAAA,EAEL,CAAA;IAAA;EACF;AAEJ,CAAC;AAEDF,WAAU,cAAc;AACxBA,WAAU,UAAUC;;;;;AC5cpB,IAAME,WAAU,CAAC;AAoDjB,IAAMC,gBAAwC;EAC5C,cAAc;EACd,cAAc;EACd,aAAa;EACb,aAAa;EACb,WAAW;AACb;AAEA,SAAS,cAAc,MAAyB,aAAmC;AAC3E,QAAA,QAAQ,KAAK,CAAC;AACpB,QAAM,OAAO,KAAK,KAAK,SAAS,CAAC;AAE7B,MAAA,UAAU,QAAQ,SAAS,MAAM;AAC5B,WAAA,YAAY,WAAW,YAAY;EAAA;AAG5C,MAAI,QAAQ,MAAM;AAChB,WAAO,YAAY;EAAA;AAGrB,MAAI,QAAQ,MAAM;AAChB,WAAO,YAAY;EAAA;AAGd,SAAA,YAAY,WAAW,YAAY;AAC5C;AAEA,IAAMC,gBAAe;EACnB,CAAC,OAAO,EAAE,OAAO,MAAM,YAAA,OAAmB;IACxC,MAAM;MACJ,iBAAiB,cACb,cAAc,cAAc,MAAM,WAAW,GAAG,KAAK,IACrD,QACE,cAAc,OAAO,KAAK,IAC1B;IAAA;EAEV;AACF;AAEO,IAAM,YAAY,QAA0B,CAAC,QAAQ,QAAQ;AAClE,QAAM,QAAQ,SAAS,aAAaD,eAAc,MAAM;AAClD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,YAAY,UAA4B;IAC5C,MAAM;IACN,SAAAD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAE;EAAA,CACD;AAED,QAAM,SAAK,qBAAM;AACjB,QAAM,iBAAa,uBAAQ,MAAM,KAAK,IAAI,CAAC,OAAO,WAAW,EAAE,OAAO,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC;AAEvF,aAAA,yBACG,KAAI,EAAA,KAAW,GAAG,UAAU,MAAM,GAAI,GAAG,QAAQ,KAAI,OACpD,cAAC,yBAAA,qBAAA,EACC,cAAC,0BAAAC,WAAA,EAAkB,MAAM,YACvB,UAAA;QAAA;MAAC;MAAA;QACC,SAAQ;QACR,MAAM;QACN,MAAM,QAAQ,EAAE;QAChB,QAAO;QACP,mBAAmB;QACnB;QACA;QACA,aAAa;QACZ,GAAG;MAAA;IACN;QAAA,yBAEC,QACC,EAAA,cAAA;MAAC;MAAA;QACC;QACA,OAAM;QACN;QACA;MAAA;IAAA,EAEJ,CAAA;EAAA,EACF,CAAA,EACF,CAAA,EACF,CAAA;AAEJ,CAAC;AAED,UAAU,cAAc;AACxB,UAAU,UAAUH;;;;;;AC9KpB,IAAII,WAAU,EAAC,QAAO,cAAa,SAAQ,aAAY;;;ACkHvD,IAAMC,gBAAyC;EAC7C,aAAa;EACb,gBAAgB;EAChB,cAAc;EACd,WAAW;EACX,MAAM;EACN,aAAa;EACb,YAAY;EACZ,UAAU;EACV,YAAY;EACZ,mBAAmB;AACrB;AAEA,IAAMC,gBAAe;EACnB,CAAC,OAAO,EAAE,aAAa,YAAY,YAAY,KAAA,OAAY;IACzD,MAAM;MACJ,wBAAwB,cAAc,cAAc,aAAa,KAAK,IAAI;MAC1E,wBAAwB,aAAa,cAAc,YAAY,KAAK,IAAI;MACxE,gBAAgB,aAAa,IAAI,OAAQ,EAAE,IAAI,IAAI,IAAK;IAAA;EAE5D;AACF;AAEA,IAAM,gBAAgB,CACpB,YACA,OACA,SACA,mBACG;AACH,MAAI,eAAe,WAAW;AAC5B,WAAO,IAAI,UAAU,KAAK,QAAQ,CAAC,CAAC;EAAA;AAGlC,MAAA,OAAO,mBAAmB,YAAY;AACxC,WAAO,eAAe,KAAK;EAAA;AAGtB,SAAA;AACT;AAEA,IAAM,WACJ,CAAC,YAAiC,mBAClC,CAAC,EAAE,GAAG,GAAG,IAAI,IAAI,SAAS,MACxB,UAAA;EAAC;EAAA;IACC;IACA;IACA;IACA;IACA,YAAY,IAAI,KAAK,UAAU;IAC/B,MAAK;IACL,YAAW;IACX,UAAU;IAEV,cAAA,0BAAC,SAAA,EAAM,GAAO,UAAA,cAAc,YAAY,OAAO,SAAS,cAAc,EAAE,CAAA;EAAA;AAC1E;AAGG,IAAM,aAAa,QAA2B,CAAC,QAAQ,QAAQ;AACpE,QAAM,QAAQ,SAAS,cAAcD,eAAc,MAAM;AACnD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,QAAQ,gBAAgB;AAE9B,QAAM,YAAY,UAA6B;IAC7C,MAAM;IACN,SAAAE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAD;EAAA,CACD;AAED,QAAM,EAAE,oBAAoB,eAAe,IAAI,qBAAwC;IACrF;IACA;IACA;EAAA,CACD;AAED,QAAM,QAAQ,KAAK,IAAI,CAAC,MAAM,cAC5B;IAAC;IAAA;MAEC,MAAM,cAAc,KAAK,OAAO,KAAK;MACrC,QAAO;MACP;IAAA;IAHK;EAAA,CAKR;AAED,aACG,0BAAA,KAAA,EAAI,KAAU,MAAa,GAAG,UAAU,MAAM,GAAI,GAAG,QACpD,cAAC,0BAAA,qBAAA,EACC,cAAC,2BAAAE,UAAA,EAAkB,GAAG,eACpB,UAAA;QAAA;MAAC;MAAA;QACC;QACA,aAAa,OAAQ,IAAI;QACzB,aAAa,OAAQ;QACrB,SAAQ;QACR,mBAAmB;QACnB;QACA;QACA;QACA,OAAO,aAAa,SAAS,cAAc,SAAS,cAAc,IAAI;QACtE,WACE,iBACI;UACE,QAAQ;UACR,aAAa;QAAA,IAEf;QAEL,GAAG;QAEH,UAAA;MAAA;IACH;IAEC,kBACC;MAAC;MAAA;QACC,GAAE;QACF,GAAE;QACF,YAAW;QACX,kBAAiB;QAChB,GAAG,UAAU,OAAO;QAEpB,UAAA;MAAA;IACH;IAGD,mBACC;MAAC;MAAA;QACC,mBAAmB;QACnB,mBAAmB;QACnB,SAAS,CAAC,EAAE,QAAA,MACV;;AAAA;YAAC;YAAA;cACC,SAAS;cACT,YAAY;cACZ,QAAQ;cACR,MAAK;cACL,WAAW,sBAAsB,aAAY,wCAAU,OAAV,mBAAc,OAAO;cAClE;YAAA;UACF;;QAED,GAAG;MAAA;IACN;IAGD;EAAA,EACH,CAAA,EACF,CAAA,EACF,CAAA;AAEJ,CAAC;AAED,WAAW,cAAc;AACzB,WAAW,UAAUD;;;;;;AC1SrB,IAAIE,WAAU,EAAC,QAAO,aAAY;;;ACgHlC,IAAMC,gBAAuC;EAC3C,aAAa;EACb,gBAAgB;EAChB,cAAc;EACd,MAAM;EACN,aAAa;EACb,YAAY;EACZ,UAAU;EACV,mBAAmB;EACnB,gBAAgB;EAChB,YAAY;AACd;AAEA,IAAMC,gBAAe;EACnB,CAAC,OAAO,EAAE,aAAa,YAAY,YAAY,MAAM,eAAA,OAAsB;IACzE,MAAM;MACJ,wBAAwB,cAAc,cAAc,aAAa,KAAK,IAAI;MAC1E,wBAAwB,aAAa,cAAc,YAAY,KAAK,IAAI;MACxE,gBAAgB,cAAc,mBAAmB,YAAY,IAAI,OAAQ,EAAE,IAAI,IAAI,IAAK;IAAA;EAE5F;AACF;AAEA,IAAMC,iBAAgB,CACpB,YACA,OACA,SACA,mBACG;AACH,MAAI,eAAe,WAAW;AAC5B,WAAO,IAAI,UAAU,KAAK,QAAQ,CAAC,CAAC;EAAA;AAGlC,MAAA,OAAO,mBAAmB,YAAY;AACxC,WAAO,eAAe,KAAK;EAAA;AAGtB,SAAA;AACT;AAEA,IAAM,iBACJ,CAAC,YAAiC,mBAClC,CAAC,EAAE,IAAI,IAAI,UAAU,aAAa,aAAa,OAAO,QAAA,MAAc;AAC5D,QAAA,SAAS,KAAK,KAAK;AACnB,QAAA,SAAS,eAAe,cAAc,eAAe;AAC3D,QAAM,IAAI,KAAK,SAAS,KAAK,IAAI,CAAC,WAAW,MAAM;AACnD,QAAM,IAAI,KAAK,SAAS,KAAK,IAAI,CAAC,WAAW,MAAM;AAGjD,aAAA;IAAC;IAAA;MACC;MACA;MACA,YAAY,IAAI,KAAK,UAAU;MAC/B,kBAAiB;MACjB,WAAWC,SAAQ;MAElB,UAAcD,eAAA,YAAY,OAAO,SAAS,cAAc;IAAA;EAC3D;AAEJ;AAEF,IAAM,kBACJ,CAAC,YAAiC,mBAClC,CAAC,EAAE,GAAG,GAAG,IAAI,IAAI,SAAS,MACxB,UAAA;EAAC;EAAA;IACC;IACA;IACA;IACA;IACA,YAAY,IAAI,KAAK,UAAU;IAC/B,MAAK;IACL,YAAW;IACX,UAAU;IAEV,cAAA,0BAAC,SAAA,EAAM,GAAO,UAAAA,eAAc,YAAY,OAAO,SAAS,cAAc,EAAE,CAAA;EAAA;AAC1E;AAGG,IAAME,YAAW,QAAyB,CAAC,QAAQ,QAAQ;AAChE,QAAM,QAAQ,SAAS,YAAYJ,eAAc,MAAM;AACjD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,QAAQ,gBAAgB;AAE9B,QAAM,YAAY,UAA2B;IAC3C,MAAM;IACN,SAAAG;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAF;EAAA,CACD;AAED,QAAM,EAAE,oBAAoB,eAAe,IAAI,qBAAsC;IACnF;IACA;IACA;EAAA,CACD;AAED,QAAM,QAAQ,KAAK,IAAI,CAAC,MAAM,cAC5B;IAAC;IAAA;MAEC,MAAM,cAAc,KAAK,OAAO,KAAK;MACrC,QAAO;MACP;IAAA;IAHK;EAAA,CAKR;AAED,aACG,0BAAA,KAAA,EAAI,KAAU,MAAa,GAAG,UAAU,MAAM,GAAI,GAAG,QACpD,cAAC,0BAAA,qBAAA,EACC,cAAC,2BAAAI,UAAA,EAAkB,GAAG,eACpB,UAAA;QAAA;MAAC;MAAA;QACC;QACA,aAAa;QACb,aAAa,OAAQ;QACrB,SAAQ;QACR,mBAAmB;QACnB;QACA;QACA;QACA,OACE,aACI,mBAAmB,WACjB,eAAe,cAAc,SAAS,cAAc,IACpD,gBAAgB,cAAc,SAAS,cAAc,IACvD;QAEN,WACE,kBAAkB,mBAAmB,YACjC;UACE,QAAQ;UACR,aAAa;QAAA,IAEf;QAEL,GAAG;QAEH,UAAA;MAAA;IACH;IAEC,mBACC;MAAC;MAAA;QACC,mBAAmB;QACnB,mBAAmB;QACnB,SAAS,CAAC,EAAE,QAAA,MACV;;AAAA;YAAC;YAAA;cACC,SAAS;cACT,YAAY;cACZ,QAAQ;cACR,MAAK;cACL,WAAW,sBAAsB,aAAY,wCAAU,OAAV,mBAAc,OAAO;cAClE;YAAA;UACF;;QAED,GAAG;MAAA;IACN;IAGD;EAAA,EACH,CAAA,EACF,CAAA,EACF,CAAA;AAEJ,CAAC;AAEDD,UAAS,cAAc;AACvBA,UAAS,UAAUD;;;;;;;ACtTnB,IAAIG,WAAU,EAAC,QAAO,cAAa,aAAY,aAAY;;;AC2G3D,IAAMC,gBAAyC;EAC7C,eAAe;EACf,oBAAoB;EACpB,qBAAqB;AACvB;AAEA,IAAMC,gBAAe,mBAAsC,CAAC,OAAO,EAAE,WAAW,UAAA,OAAiB;EAC/F,MAAM;IACJ,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;IACpE,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;EAAA;AAExE,EAAE;AAEK,IAAMC,cAAa,QAA2B,CAAC,QAAQ,QAAQ;AACpE,QAAM,QAAQ,SAAS,cAAcF,eAAc,MAAM;AACnD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,QAAQ,gBAAgB;AAE9B,QAAM,YAAY,UAA6B;IAC7C,MAAM;IACN,SAAAG;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAF;EAAA,CACD;AAED,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,wBAAwB,IAAI;AAE1E,QAAM,EAAE,oBAAoB,eAAe,IAAI,qBAAwC;IACrF;IACA;IACA;EAAA,CACD;AAED,QAAM,SAAS,OAAO,IAAI,CAAC,MAAM,cAC/B;IAAC;IAAA;MAEC,MAAM,KAAK;MACX,SAAS,KAAK;MACd,QAAQ,cAAc,KAAK,eAAe,KAAK,OAAO,KAAK;MAC3D,MAAM,cAAc,KAAK,OAAO,KAAK;MACrC,aACE,kBACI,oBAAoB,KAAK,OACvB,KAAK,WAAW,MAChB,OACF,KAAK,WAAW;MAEtB,eAAe,kBAAmB,oBAAoB,KAAK,OAAO,IAAI,MAAO;MAC7E,mBAAmB;MAClB,GAAI,OAAO,eAAe,aAAa,WAAW,IAAI,IAAI;IAAA;IAdtD;EAAA,CAgBR;AAED,aAAA,0BACG,KAAI,EAAA,KAAW,GAAG,UAAU,MAAM,GAAI,GAAG,QACxC,cAAA,0BAAC,qBAAqB,EAAA,GAAG,UAAU,WAAW,GAC5C,cAAA,2BAACG,YAAmB,EAAA,MAAa,GAAG,iBACjC,UAAA;IAAA,qBAAkB,0BAAA,WAAA,EAAU,QAAO,2BAA2B,GAAG,eAAgB,CAAA;IACjF,0BAAsB,0BAAC,gBAAe,EAAA,SAAmB,GAAG,oBAAqB,CAAA;IACjF,2BACE,0BAAA,iBAAA,EAAgB,QAAO,2BAA2B,GAAG,qBAAsB,CAAA;IAE7E;IACA,kBACC;MAAC;MAAA;QACC,eAAc;QACd,SAAS,CAAC,gBACR;UAAC;UAAA;YACC,SAAS,QAAQ;YACjB,aAAa;YACb,iBAAgB,2CAAa,kBAAiB;YAC9C,YAAY;YACZ,QAAQ;YACR;YACA,UAAQ;UAAA;QACV;QAED,GAAG;MAAA;IACN;IAED;EAAA,EACH,CAAA,EACF,CAAA,EACF,CAAA;AAEJ,CAAC;AAEDF,YAAW,cAAc;AACzBA,YAAW,UAAUC;;;;;AChJrB,SAAS,QAAQ,KAAa,SAAmC;AACxD,SAAA,QAAQ,QAAQ,IAAI,MAAM;AACnC;AASA,IAAME,iBAA2C;EAC/C,WAAW;EACX,WAAW;EACX,aAAa;EACb,0BAA0B;EAC1B,UAAU;EACV,iBAAiB;EACjB,UAAU;AACZ;AAEA,IAAMC,gBAAe,mBAAwC,CAAC,OAAO,EAAE,WAAW,UAAA,OAAiB;EACjG,MAAM;IACJ,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;IACpE,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;EAAA;AAExE,EAAE;AAEK,IAAMC,gBAAe,QAA6B,CAAC,QAAQ,QAAQ;AACxE,QAAM,QAAQ,SAAS,gBAAgBF,gBAAc,MAAM;AACrD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEE,QAAA,eAAe,CAAC,SACpB,OAAO,mBAAmB,aAAa,iBAAiB,iDAAiB;AACrE,QAAA,aAAa,aAAa,GAAG;AAC7B,QAAA,aAAa,aAAa,GAAG;AAEnC,QAAM,QAAQ,gBAAgB;AAE9B,QAAM,aAAa,KAAK,IAAI,CAAC,UAAU;IACrC,GAAG;IACH,MAAM,KAAK,KAAK,IAAI,CAAC,WAAW,EAAE,GAAG,OAAO,MAAM,KAAK,KAAA,EAAO;EAAA,EAC9D;AAEF,QAAM,EAAE,oBAAoB,eAAe,IAAI,qBAA0C;IACvF;IACA;IACA;EAAA,CACD;AAED,QAAM,YAAY,UAA+B;IAC/C,MAAM;IACN,SAAAG;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAF;EAAA,CACD;AAED,QAAM,gBAAgB,aAAa,WAAW,aAAa,OAAO,aAAa;AAC/E,QAAM,gBAAgB,aAAa,WAAW,aAAa,OAAO,aAAa;AAC/E,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,wBAAwB,IAAI;AAC1E,QAAM,kBAAkB,oBAAoB;AACtC,QAAA,mBAAmB,CAAC,UAA4C;AACpE,uBAAmB,IAAI;AACvB,iDAAe;EACjB;AAEA,QAAM,sBAAsB,iDAAgB,IAAI,CAAC,MAAM,UAAU;AAC/D,UAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AAE3C,eAAA;MAAC;MAAA;QAEC,QAAQ,KAAK,QAAQ,QAAQ;QAC7B,aAAa;QACZ,GAAG;QACJ,OAAO;UACL,OAAO,KAAK;UACZ,MAAM,KAAK,QAAQ,QAAQ;UAC3B,UAAU;UACV,UAAU,KAAK,iBAAiB;QAClC;QACC,GAAG,UAAU,eAAe;MAAA;MAVxB;IAWP;EAAA;AAIJ,QAAM,WAAW,WAAW,IAAI,CAAC,MAAM,UAAU;AACzC,UAAA,SAAS,mBAAmB,oBAAoB,KAAK;AAEzD,eAAA;MAAC;MAAA;QACC,MAAM,KAAK;QACX,MAAM,cAAc,KAAK,OAAO,KAAK;QAErC,mBAAmB;QACnB,aAAa,SAAS,MAAM;QAC3B,GAAG;QAEH,UAAA;UAAe,mBAAA,0BAAC,WAAA,EAAU,SAAS,QAAQ,WAAW,GAAG,UAAU,GAAG,IAAI,GAAI,CAAA;UAC9E,6CAAc;QAAA;MAAA;MANV;IAOP;EAAA,CAEH;AAGC,aAAA;IAAC;IAAA;MACC;MACC,GAAG,UAAU,MAAM;MACpB,cAAc;MACd,KAAK,OAAO;MACX,GAAG;MAEJ,cAAC,0BAAA,qBAAA,EAAqB,GAAG,UAAU,WAAW,GAC5C,cAAA;QAACG;QAAA;UACC,QAAQ;YACN,QAAQ,aAAa,KAAK;YAC1B,MAAM,aAAa,KAAK;YACxB,OAAO,aAAa,IAAI;UAC1B;UACC,GAAG;UAEJ,UAAA;gBAAA;cAAC;cAAA;gBACC;gBACA,UAAU,aAAa,OAAO,aAAa;gBAC3C,YAAY,aAAa,OAAO,aAAa;gBAC5C,GAAG,UAAU,MAAM;gBACnB,GAAG;cAAA;YACN;gBACA;cAAC;cAAA;gBACC,MAAK;gBACL,MAAM,CAAC;gBACP,SAAS,QAAQ;gBACjB,MAAM,EAAE,WAAW,oBAAoB,UAAU,IAAI,MAAM,eAAe;gBAC1E,QAAO;gBACP,UAAS;gBACT,UAAU,gBAAgB,EAAE,QAAQ,eAAmB,IAAA;gBACvD,YAAY;gBACZ,MAAM,6BAAM;gBACZ,eAAe;gBACd,GAAG,UAAU,MAAM;gBACnB,GAAG;gBAEH,UAAA;kBAAA,kBACE,0BAAA,OAAA,EAAM,UAAS,gBAAe,QAAQ,KAAK,UAAU,IAAK,GAAG,UAAU,WAAW,GAChF,UACH,WAAA,CAAA;kBAED,yCAAY;gBAAA;cAAA;YACf;gBACA;cAAC;cAAA;gBACC,MAAK;gBACL,MAAM,CAAC;gBACP,UAAU;gBACV,SAAS,QAAQ;gBACjB,UAAU,gBAAgB,EAAE,QAAQ,eAAmB,IAAA;gBACvD,MAAM,EAAE,WAAW,qBAAqB,UAAU,IAAI,MAAM,eAAe;gBAC3E,eAAa;gBACb,MAAM,6BAAM;gBACZ,eAAe;gBACd,GAAG,UAAU,MAAM;gBACnB,GAAG;gBAEH,UAAA;kBACC,kBAAA;oBAAC;oBAAA;sBACC,UAAS;sBACT,OAAO;sBACP,YAAW;sBACX,UAAU;sBACV,QAAQ;sBACP,GAAG,UAAU,WAAW;sBAExB,UAAA;oBAAA;kBACH;kBAED,yCAAY;gBAAA;cAAA;YACf;YAEC,mBACC;cAAC;cAAA;gBACC,mBAAmB;gBACnB,mBAAmB,6BAA6B;gBAChD,UAAU,EAAE,GAAG,EAAE;gBACjB,QAAQ;kBACN,QAAQ;kBACR,aAAa;kBACb;gBACF;gBACA,SAAS,CAAC,EAAE,OAAO,QACjB,UAAA;kBAAC;kBAAA;oBACC,MAAK;oBACL;oBACA,SACE,SACI,mCAAS,IAAI,CAAC,SAAU;;AAAA;wBACtB,GAAG;wBACH,MAAM,OAAO,QAAQ,KAAK,MAAM,OAAO,CAAC,KAAK,KAAK;wBAClD,SACE,kBAAa,QAAQ,KAAK,MAAM,OAAO,CAAC,MAAxC,mBAA4C,KAAK,WAAU,KAAK;sBAClE;yBACF,mCAAS,IAAI,CAAC,SAAU;;AAAA;wBACtB,GAAG;wBACH,SACE,kBAAa,QAAQ,KAAK,MAAM,OAAO,CAAC,MAAxC,mBAA4C,KAAK,WAAU,KAAK;sBAAA;;oBAG1E,YAAY;oBACZ,QAAQ;oBACR,QAAQ;kBAAA;gBACV;gBAED,GAAG;cAAA;YACN;YAGD,kBACC;cAAC;cAAA;gBACC,eAAc;gBACd,SAAS,CAAC,YACR;;AAAA;oBAAC;oBAAA;sBACC,UAAS,aAAQ,YAAR,mBAAiB,IAAI,CAAC,MAAM,WAAW;wBAC9C,GAAG;wBACH,SAAS,KAAK,KAAK,EAAE;sBAAA;sBAEvB,aAAa;sBACb,iBAAgB,2CAAa,kBAAiB;sBAC9C,YAAY;sBACZ,QAAQ;sBACR,QAAQ;oBAAA;kBACV;;gBAEF,QAAQ;gBACP,GAAG;cAAA;YACN;YAGD;YACA;UAAA;QAAA;MAAA,EAEL,CAAA;IAAA;EACF;AAEJ,CAAC;AAEDF,cAAa,cAAc;AAC3BA,cAAa,UAAUC;;;;AChVvB,SAAS,UAAU,MAA6B,KAAa;AAC3D,QAAM,SAAS,KAAK,IAAI,CAAC,SAAS,KAAK,GAAG,CAAC;AACpC,SAAA,CAAC,KAAK,IAAI,GAAG,MAAM,GAAG,KAAK,IAAI,GAAG,MAAM,CAAC;AAClD;AAUA,SAAS,mBAAmB;EAC1B;EACA;EACA;EACA;EACA;AACF,GAA4B;AACtB,MAAA,UAAU,WAAW,QAAQ,QAAQ;AACvC,UAAM,OAAO,QAAQ,CAAC,KAAK,QAAQ,CAAC,EAAE;AAGpC,eAAA,0BAAC,OAAA,EAAK,GAAG,UAAU,SAAS,GAC1B,cAAA,2BAAC,OAAM,EAAA,SAAQ,iBACb,UAAA;UAAA,0BAAC,MAAA,EAAK,IAAG,MAAM,UAAK,KAAA,QAAQ,CAAC,EAAE,CAAA;UAC9B,0BAAA,MAAA,EAAK,IAAG,MAAM,UAAA,iBAAiB,eAAe,KAAK,QAAQ,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,EAAE,CAAA;IAAA,EAAA,CACpF,EACF,CAAA;EAAA;AAIG,SAAA;AACT;AAmEA,IAAME,iBAA0C;EAC9C,OAAO;EACP,aAAa;AACf;AAEA,IAAMC,gBAAe,mBAAuC,CAAC,OAAO,EAAE,WAAW,UAAA,OAAiB;EAChG,MAAM;IACJ,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;IACpE,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;EAAA;AAExE,EAAE;AAEK,IAAM,cAAc,QAA4B,CAAC,QAAQ,QAAQ;AACtE,QAAM,QAAQ,SAAS,eAAeD,gBAAc,MAAM;AACpD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,QAAQ,gBAAgB;AAE9B,QAAM,YAAY,UAA8B;IAC9C,MAAM;IACN,SAAAE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAD;EAAA,CACD;AAED,aACG,0BAAA,KAAA,EAAI,KAAW,GAAG,UAAU,MAAM,GAAI,GAAG,QACxC,cAAA,0BAAC,qBACC,EAAA,cAAA,2BAAC,cACC,EAAA,UAAA;QAAA;MAAC;MAAA;QACC,MAAK;QACL,SAAS,QAAQ;QACjB,UAAU;QACV,MAAM,EAAE,UAAU,IAAI,MAAM,eAAe;QAC3C,UAAU,EAAE,WAAW,oBAAoB,QAAQ,eAAe;QAClE,QAAO;QACN,GAAG,UAAU,MAAM;QACnB,GAAG;MAAA;IACN;QAEA;MAAC;MAAA;QACC,MAAK;QACL,SAAS,QAAQ;QACjB,QAAQ;QACR,OAAO,QAAQ,SAAY;QAC3B,MAAM;QACN,UAAU;QACV,UAAU;QACV,OAAO,EAAE,OAAO,OAAO,UAAU,eAAe,UAAU,IAAI,MAAM,eAAe;QAClF,GAAG,UAAU,MAAM;QACnB,GAAG;MAAA;IACN;QAEA;MAAC;MAAA;QACC,MAAK;QACL,SAAS,QAAQ;QACjB,QAAQ,UAAU,MAAM,QAAQ,CAAC;QACjC;QACC,GAAG;MAAA;IACN;IAEC,mBACC;MAAC;MAAA;QACC,mBAAmB;QACnB,mBAAmB;QACnB,QAAQ,EAAE,QAAQ,2BAA2B,aAAa,GAAG,iBAAiB,MAAM;QACpF,SAAS,CAAC,gBACR;UAAC;UAAA;YACC;YACA,QAAQ,QAAQ;YAChB,SAAS,QAAQ;YACjB;YACA;UAAA;QACF;QAED,GAAG;MAAA;IACN;QAGF;MAAC;MAAA;QACC;QACA,MAAM,cAAc,OAAO,KAAK;QAChC,mBAAmB;QAClB,GAAG;MAAA;IAAA;EACN,EACF,CAAA,EACF,CAAA,EACF,CAAA;AAEJ,CAAC;AAED,YAAY,cAAc;AAC1B,YAAY,UAAUC;;;;;ACpHtB,IAAMC,iBAA6C;EACjD,WAAW;EACX,WAAW;EACX,aAAa;EACb,0BAA0B;EAC1B,UAAU;EACV,iBAAiB;EACjB,UAAU;EACV,UAAU;EACV,cAAc;EACd,aAAa;EACb,WAAW;AACb;AAEA,IAAMC,iBAAe;EACnB,CAAC,OAAO,EAAE,WAAW,UAAA,OAAiB;IACpC,MAAM;MACJ,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;MACpE,sBAAsB,YAAY,cAAc,WAAW,KAAK,IAAI;IAAA;EAExE;AACF;AAEO,IAAM,iBAAiB,QAA+B,CAAC,QAAQ,QAAQ;AAC5E,QAAM,QAAQ,SAAS,kBAAkBD,gBAAc,MAAM;AACvD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,QAAQ,gBAAgB;AAC9B,QAAM,gBAAgB,aAAa,WAAW,aAAa,OAAO,aAAa;AAC/E,QAAM,gBAAgB,aAAa,WAAW,aAAa,OAAO,aAAa;AAC/E,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,wBAAwB,IAAI;AAC1E,QAAM,kBAAkB,oBAAoB;AACtC,QAAA,mBAAmB,CAAC,UAA4C;AACpE,uBAAmB,IAAI;AACvB,iDAAe;EACjB;AACA,QAAM,EAAE,oBAAoB,eAAe,IAAI,qBAA4C;IACzF;IACA;IACA;EAAA,CACD;AAED,QAAM,YAAY,UAAiC;IACjD,MAAM;IACN,SAAAE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAD;EAAA,CACD;AAED,QAAM,QAAQ,OAAO,IAAI,CAAC,SAAS;AACjC,UAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AACvC,UAAA,SAAS,mBAAmB,oBAAoB,KAAK;AAEvD,QAAA,KAAK,SAAS,QAAQ;AAEtB,iBAAA;QAAC;QAAA;UACE,GAAG,UAAU,MAAM;UACpB,KAAK,KAAK;UACV,MAAM,KAAK;UACX,SAAS,KAAK;UACd,KACE,WACI;YACE,aAAa,SAAS,IAAI;YAC1B,eAAe,SAAS,IAAI;YAC5B,aAAa;YACb,MAAM;YACN,QAAQ;YACR,GAAG;UAAA,IAEL;UAEN,WACE,WACI,EAAE,MAAM,8BAA8B,QAAQ,OAAO,GAAG,eAAA,IACxD;UAEN,MAAM;UACN,QAAQ;UACR;UACA,mBAAmB;UACnB,aAAa,SAAS,IAAI;UAC1B,eAAe,SAAS,MAAM;UAC9B;UACA,MAAM;UACN,iBAAiB,KAAK;UACtB,SAAS,KAAK,WAAW;UACzB,OAAO,sBAAmB,0BAAA,YAAA,EAAW,eAAA,CAAgC,IAAK;UACzE,GAAI,OAAO,cAAc,aAAa,UAAU,IAAI,IAAI;QAAA;MAC3D;IAAA;AAIA,QAAA,KAAK,SAAS,QAAQ;AAEtB,iBAAA;QAAC;QAAA;UACE,GAAG,UAAU,MAAM;UACpB,KAAK,KAAK;UACV,MAAM,KAAK;UACX,MAAM;UACN,SAAS,KAAK;UACd,MAAM;UACN;UACA,QAAQ;UACR,mBAAmB;UACnB;UACA,KACE,WACI;YACE,aAAa,SAAS,IAAI;YAC1B,eAAe,SAAS,IAAI;YAC5B,aAAa;YACb,MAAM;YACN,QAAQ;YACR,GAAG;UAAA,IAEL;UAEN,WACE,WACI;YACE,MAAM,MAAM;YACZ,QAAQ;YACR,aAAa;YACb,GAAG;YACH,GAAG;UAAA,IAEL;UAEN,aAAa,SAAS,IAAI;UAC1B,eAAe,SAAS,MAAM;UAC9B,iBAAiB,KAAK;UACtB,SAAS,KAAK,WAAW;UACzB,OAAO,sBAAmB,0BAAA,YAAA,EAAW,eAAA,CAAgC,IAAK;UACzE,GAAI,OAAO,cAAc,aAAa,UAAU,IAAI,IAAI;QAAA;MAC3D;IAAA;AAIA,QAAA,KAAK,SAAS,OAAO;AAErB,iBAAA;QAAC;QAAA;UACE,GAAG,UAAU,KAAK;UACnB,KAAK,KAAK;UACV,MAAM,KAAK;UACX,SAAS,KAAK;UACd,MAAM;UACN,QAAQ;UACR,mBAAmB;UACnB,aAAa,SAAS,MAAM;UAC5B,eAAe,SAAS,MAAM;UAC9B,SAAS,KAAK,WAAW;UACzB,cAAc;UACb,GAAI,OAAO,aAAa,aAAa,SAAS,IAAI,IAAI;QAAA;QAEtD,yBACC;UAAC;UAAA;YACC,UAAS;YACT,UAAU;YACV,MAAK;YACL,WAAW;UAAA;QAAA;MAGjB;IAAA;AAIG,WAAA;EAAA,CACR;AAED,QAAM,sBAAsB,iDAAgB,IAAI,CAAC,MAAM,UAAU;AAC/D,UAAM,QAAQ,cAAc,KAAK,OAAO,KAAK;AAE3C,eAAA;MAAC;MAAA;QAEC,QAAQ,KAAK,QAAQ,QAAQ;QAC7B,aAAa;QACb,SAAS,KAAK,WAAW;QACxB,GAAG;QACJ,OAAO;UACL,OAAO,KAAK;UACZ,MAAM,KAAK,QAAQ,QAAQ;UAC3B,UAAU;UACV,UAAU,KAAK,iBAAiB;QAClC;QACC,GAAG,UAAU,eAAe;MAAA;MAXxB;IAYP;EAAA;AAIJ,QAAM,mBAAmB;IACvB,UAAU;IACV,MAAM;IACN,UAAU,gBAAgB,EAAE,QAAQ,eAAmB,IAAA;IACvD,eAAe;IACf;IACA,eAAe;IACf,GAAG,UAAU,MAAM;EACrB;AAGE,aAAA;IAAC;IAAA;MACC;MACC,GAAG,UAAU,MAAM;MACpB,cAAc;MACd,KAAK,OAAO;MACX,GAAG;MAEJ,cAAC,0BAAA,qBAAA,EAAqB,GAAG,UAAU,WAAW,GAC5C,cAAA;QAACE;QAAA;UACC;UACA,YAAY;UACZ,QAAQ;YACN,QAAQ,aAAa,KAAK;YAC1B,MAAM,aAAa,KAAK;YACxB,OAAO,aAAa,IAAI;UAC1B;UACC,GAAG;UAEH,UAAA;YACC,kBAAA;cAAC;cAAA;gBACC,eAAc;gBACd,SAAS,CAAC,gBACR;kBAAC;kBAAA;oBACC,SAAS,QAAQ;oBACjB,aAAa;oBACb,iBAAgB,2CAAa,kBAAiB;oBAC9C,YAAY;oBACZ,QAAQ;oBACR;kBAAA;gBACF;gBAED,GAAG;cAAA;YACN;gBAGF;cAAC;cAAA;gBACC,MAAM,CAAC;gBACP;gBACA,MAAM,EAAE,WAAW,oBAAoB,UAAU,IAAI,MAAM,eAAe;gBAC1E,QAAO;gBACP,UAAS;gBACT,UAAU,gBAAgB,EAAE,QAAQ,eAAmB,IAAA;gBACvD,YAAY;gBACX,GAAG,UAAU,MAAM;gBACnB,GAAG;gBAEH,UAAA;kBAAA,kBACE,0BAAA,OAAA,EAAM,UAAS,gBAAe,QAAQ,KAAK,UAAU,IAAK,GAAG,UAAU,WAAW,GAChF,UACH,WAAA,CAAA;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC,SAAQ;gBACR,aAAY;gBACZ,MAAM,EAAE,WAAW,qBAAqB,UAAU,IAAI,MAAM,eAAe;gBAC3E,MAAM,CAAC;gBACN,GAAG;gBACH,GAAG;gBAEH,UAAA;kBACC,kBAAA;oBAAC;oBAAA;sBACC,UAAS;sBACT,OAAO;sBACP,YAAW;sBACX,UAAU;sBACV,QAAQ;sBACP,GAAG,UAAU,WAAW;sBAExB,UAAA;oBAAA;kBACH;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC,SAAQ;gBACR,aAAY;gBACZ,MAAM,EAAE,WAAW,oBAAoB,UAAU,IAAI,MAAM,eAAe;gBAC1E,MAAM,CAAC;gBACN,GAAG;gBACH,GAAG;gBAEH,UAAA;kBACC,uBAAA;oBAAC;oBAAA;sBACC,UAAS;sBACT,OAAO;sBACP,YAAW;sBACX,UAAU;sBACV,QAAQ;sBACP,GAAG,UAAU,WAAW;sBAExB,UAAA;oBAAA;kBACH;kBAED,yCAAY;gBAAA;cAAA;YACf;gBAEA;cAAC;cAAA;gBACC;gBACA,UAAU,aAAa,OAAO,aAAa;gBAC3C,YAAY,aAAa,OAAO,aAAa;gBAC5C,GAAG,UAAU,MAAM;gBACnB,GAAG;cAAA;YACN;YAEC,mBACC;cAAC;cAAA;gBACC,mBAAmB;gBACnB,mBAAmB,6BAA6B;gBAChD,UAAU,EAAE,GAAG,EAAE;gBACjB,QAAQ;kBACN,QAAQ;kBACR,aAAa;kBACb;gBACF;gBACA,SAAS,CAAC,EAAE,OAAO,QACjB,UAAA;kBAAC;kBAAA;oBACC;oBACA;oBACA;oBACA,YAAY;oBACZ,QAAQ;oBACR;oBACA;kBAAA;gBACF;gBAED,GAAG;cAAA;YACN;YAGD;YACA;YACA;UAAA;QAAA;MAAA,EAEL,CAAA;IAAA;EACF;AAEJ,CAAC;AAED,eAAe,cAAc;AAC7B,eAAe,UAAUD;;;;;;;ACthBzB,IAAIE,WAAU,EAAC,QAAO,cAAa,WAAU,aAAY;;;ACyFzD,IAAMC,iBAA6C;EACjD,SAAS;EACT,YAAY;EACZ,UAAU;EACV,gBAAgB;EAChB,aAAa;AACf;AAEA,IAAMC,iBAAe;EACnB,CAAC,OAAO,EAAE,qBAAA,OAA4B;IACpC,MAAM;MACJ,4BAA4B,uBACxB,cAAc,sBAAsB,KAAK,IACzC;IAAA;EAER;AACF;AAEO,IAAMC,kBAAiB,QAA+B,CAAC,QAAQ,QAAQ;AAC5E,QAAM,QAAQ,SAAS,kBAAkBF,gBAAc,MAAM;AACvD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AACJ,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,wBAAwB,IAAI;AAE1E,QAAM,YAAY,UAAiC;IACjD,MAAM;IACN,SAAAG;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAF;EAAA,CACD;AAED,QAAM,QAAQ,gBAAgB;AACxB,QAAA,wBAAwB,KAAK,IAAI,CAAC,EAAE,OAAO,GAAG,KAAA,MAAW;AACvD,UAAA,gBAAgB,cAAc,OAAO,KAAK;AAEzC,WAAA;MACL,GAAG;MACH,MAAM;MACN,aAAa,kBACT,oBAAoB,KAAK,OACvB,KAAK,WAAW,IAChB,OACF,KAAK,WAAW;IACtB;EAAA,CACD;AAED,QAAM,EAAE,oBAAoB,eAAe,IAAI,qBAA4C;IACzF;IACA;IACA;EAAA,CACD;AAGC,aAAA,0BAAC,KAAI,EAAA,KAAW,GAAG,UAAU,MAAM,GAAI,GAAG,QACxC,cAAA,0BAAC,qBACC,EAAA,cAAA;IAACG;IAAA;MACC,QAAQ,EAAE,KAAK,GAAG,QAAQ,GAAG,MAAM,GAAG,OAAO,EAAE;MAC/C,aAAY;MACZ,aAAY;MACZ,IAAG;MACH,IAAG;MACH;MACA;MACA;MACA,MAAM;MACL,GAAG;MAEJ,UAAA;YAAA;UAAC;UAAA;YACC,OACE,aACI;cACE,UAAU;cACV,MAAM;cACN,UAAU;YAEZ,IAAA;YAEN,YAAY,iBAAiB,EAAE,MAAM,gCAAA,IAAoC;YACzE;YACA,mBAAmB;YAClB,GAAG;UAAA;QACN;QAEC,kBACC;UAAC;UAAA;YACC,eAAc;YACd,SAAS,CAAC,YACR;;AAAA;gBAAC;gBAAA;kBACC,UAAS,aAAQ,YAAR,mBAAiB,IAAI,CAAC,SAAU;;AAAA;sBACvC,GAAG;sBACH,UAAUC,MAAA,KAAK,YAAL,gBAAAA,IAAsB;oBAAA;;kBAElC,aAAa;kBACb,iBAAgB,2CAAa,kBAAiB;kBAC9C,YAAY;kBACZ,QAAQ;kBACR,UAAQ;gBAAA;cACV;;YAED,GAAG;UAAA;QACN;QAGD,mBACC;UAAC;UAAA;YACC,mBAAmB;YACnB,mBAAmB;YACnB,QAAQ,EAAE,QAAQ,4BAA4B;YAC9C,SAAS,CAAC,EAAE,QAAQ,MAAA;;AAAA,oDACjB,OAAO,EAAA,GAAG,UAAU,SAAS,GAC5B,UAAA;oBAAC,2BAAA,OAAA,EAAM,KAAI,MACT,UAAA;sBAAC,0BAAA,aAAA,EAAY,QAAO,wCAAU,OAAV,mBAAc,QAAQ,MAAM,MAAM,IAAI,YAAY,MAAO,CAAA;sBAAA,0BAC5E,QAAM,EAAA,WAAA,wCAAU,OAAV,mBAAc,QAAQ,KAAK,CAAA;gBAAA,EACpC,CAAA;oBAAA,0BAEC,QAAM,EAAA,WAAA,wCAAU,OAAV,mBAAc,QAAQ,SAAS,CAAA;cAAA,EACxC,CAAA;;YAED,GAAG;UAAA;QAAA;MACN;IAAA;EAAA,EAAA,CAGN,EACF,CAAA;AAEJ,CAAC;AAEDH,gBAAe,cAAc;AAC7BA,gBAAe,UAAUC;;;;;;ACnPzB,IAAIG,WAAU,EAAC,QAAO,aAAY;;;ACiGlC,IAAMC,iBAA0C;EAC9C,aAAa;EACb,MAAM;EACN,aAAa;EACb,YAAY;EACZ,gBAAgB;EAChB,mBAAmB;AACrB;AAEA,IAAMC,iBAAe;EACnB,CAAC,OAAO,EAAE,aAAa,YAAY,KAAA,OAAY;IAC7C,MAAM;MACJ,wBAAwB,cAAc,cAAc,aAAa,KAAK,IAAI;MAC1E,wBAAwB,aAAa,cAAc,YAAY,KAAK,IAAI;MACxE,gBAAgB,IAAI,IAAK;IAAA;EAE7B;AACF;AAEO,IAAMC,eAAc,QAA4B,CAAC,QAAQ,QAAQ;AACtE,QAAM,QAAQ,SAAS,eAAeF,gBAAc,MAAM;AACpD,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,GAAG;EAAA,IACD;AAEJ,QAAM,QAAQ,gBAAgB;AAE9B,QAAM,YAAY,UAA8B;IAC9C,MAAM;IACN,SAAAG;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAAF;EAAA,CACD;AAED,QAAM,EAAE,oBAAoB,eAAe,IAAI,qBAAyC;IACtF;IACA;IACA;EAAA,CACD;AAED,aACG,0BAAA,KAAA,EAAI,KAAU,MAAa,GAAG,UAAU,MAAM,GAAI,GAAG,QACpD,cAAC,0BAAA,qBAAA,EACC,cAAC,2BAAAG,aAAA,EAAqB,GAAG,kBACvB,UAAA;QAAA;MAAC;MAAA;QACC;QACA,SAAQ;QACR,mBAAmB;QACnB,QAAO;QACP;QACC,GAAG;QAEH,UAAA;UACC,kBAAA;YAAC;YAAA;cACC,UAAU;cACV,MACE,mBAAmB,WACf,0DACA;cAEN,QAAO;cACP,YAAW;cACX,UAAU;cACV,SAAS,CAAC,UAAU;AAClB,uBAAO,OAAO,mBAAmB,aAC7B,eAAe,MAAM,KAAe,IACpC,MAAM;cAAA;YACZ;UACF;UAED,KAAK,IAAI,CAAC,OAAO,cAChB;YAAC;YAAA;cAEC,MAAM,cAAc,MAAM,OAAO,KAAK;cACtC,QAAO;cACP;YAAA;YAHK;UAKR,CAAA;QAAA;MAAA;IACH;IAEC,mBACC;MAAC;MAAA;QACC,mBAAmB;QACnB,mBAAmB;QACnB,SAAS,CAAC,EAAE,QAAA,MACV;;AAAA;YAAC;YAAA;cACC,SAAS;cACT,YAAY;cACZ,QAAQ;cACR,MAAK;cACL,WAAW,sBAAsB,aAAY,wCAAU,OAAV,mBAAc,OAAO;cAClE;YAAA;UACF;;QAED,GAAG;MAAA;IACN;IAGD;EAAA,EACH,CAAA,EACF,CAAA,EACF,CAAA;AAEJ,CAAC;AAEDF,aAAY,cAAc;AAC1BA,aAAY,UAAUC;",
  "names": ["classes", "defaultProps", "classes", "classes", "defaultProps", "AreaChart", "classes", "ReChartsAreaChart", "valueToPercent", "defaultProps", "varsResolver", "BarChart", "classes", "ReChartsBarChart", "defaultProps", "varsResolver", "LineChart", "classes", "ReChartsLineChart", "classes", "defaultProps", "varsResolver", "ReChartsAreaChart", "classes", "defaultProps", "varsResolver", "classes", "ReChartsPieChart", "classes", "defaultProps", "varsResolver", "getLabelValue", "classes", "PieChart", "ReChartsPieChart", "classes", "defaultProps", "varsResolver", "RadarChart", "classes", "ReChartsRadarChart", "defaultProps", "varsResolver", "ScatterChart", "classes", "ReChartsScatterChart", "defaultProps", "varsResolver", "classes", "defaultProps", "varsResolver", "classes", "ReChartsCompositeChart", "classes", "defaultProps", "varsResolver", "RadialBarChart", "classes", "ReChartsRadialBarChart", "_a", "classes", "defaultProps", "varsResolver", "FunnelChart", "classes", "RechartsFunnelChart"]
}
