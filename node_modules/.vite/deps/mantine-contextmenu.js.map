{
  "version": 3,
  "sources": ["../../.deno/mantine-contextmenu@7.15.3/node_modules/mantine-contextmenu/package/ContextMenuDivider.tsx", "../../.deno/mantine-contextmenu@7.15.3/node_modules/mantine-contextmenu/package/ContextMenuItem.tsx", "../../.deno/mantine-contextmenu@7.15.3/node_modules/mantine-contextmenu/package/ContextMenu.tsx", "../../.deno/mantine-contextmenu@7.15.3/node_modules/mantine-contextmenu/package/ContextMenuProvider.tsx", "../../.deno/mantine-contextmenu@7.15.3/node_modules/mantine-contextmenu/package/ContextMenuPortal.tsx", "../../.deno/mantine-contextmenu@7.15.3/node_modules/mantine-contextmenu/package/ContextMenuOverlay.tsx", "../../.deno/mantine-contextmenu@7.15.3/node_modules/mantine-contextmenu/package/utils.ts"],
  "sourcesContent": ["import { Box } from '@mantine/core';\nimport clsx from 'clsx';\nimport type { ContextMenuItemOptions } from './types';\n\nexport type ContextMenuDividerProps = Pick<ContextMenuItemOptions, 'className' | 'style'>;\n\nexport function ContextMenuDivider({ className, style }: ContextMenuDividerProps) {\n  return <Box className={clsx('mantine-contextmenu-divider', className)} style={style} />;\n}\n", "import { Box, UnstyledButton, parseThemeColor, rgba } from '@mantine/core';\nimport { useMediaQuery, useTimeout } from '@mantine/hooks';\nimport clsx from 'clsx';\nimport { useContext, useRef, useState, type MouseEventHandler } from 'react';\nimport { ContextMenu } from './ContextMenu';\nimport { ContextMenuSettingsCtx } from './ContextMenuProvider';\nimport type { ContextMenuContent, ContextMenuItemOptions, WithRequiredProperty } from './types';\n\nexport function ContextMenuItem({\n  className,\n  style,\n  icon,\n  iconRight,\n  title,\n  color,\n  disabled,\n  onClick,\n  onHide,\n  items,\n}: WithRequiredProperty<Omit<ContextMenuItemOptions, 'key'>, 'title'> & { onHide: () => void }) {\n  const ref = useRef<HTMLButtonElement>(null);\n  const { submenuDelay } = useContext(ContextMenuSettingsCtx);\n\n  const hoverAvailable = useMediaQuery(`(hover: hover)`);\n\n  const [submenuPosition, setSubmenuPosition] = useState<{ x: number; y: number } | null>(null);\n\n  const { start: startShowingSubmenu, clear: stopShowingSubmenu } = useTimeout(() => {\n    const { top: y, right: x } = ref.current!.getBoundingClientRect();\n    setSubmenuPosition({ x, y });\n  }, submenuDelay);\n\n  const { start: startHidingSubmenu, clear: stopHidingSubmenu } = useTimeout(() => {\n    setSubmenuPosition(null);\n  }, submenuDelay);\n\n  const showSubmenu = () => {\n    stopHidingSubmenu();\n    startShowingSubmenu();\n  };\n\n  const hideSubmenu = () => {\n    stopShowingSubmenu();\n    startHidingSubmenu();\n  };\n\n  const hasSubmenu = items && !disabled;\n  const showSubmenuOnHover = hasSubmenu && hoverAvailable;\n\n  const handleClick: MouseEventHandler<HTMLButtonElement> | undefined = hasSubmenu\n    ? (e) => {\n        e.stopPropagation();\n        showSubmenu();\n      }\n    : onClick\n      ? (e) => {\n          onHide();\n          onClick!(e);\n        }\n      : undefined;\n\n  return (\n    <div\n      onMouseEnter={showSubmenuOnHover ? showSubmenu : undefined}\n      onMouseLeave={showSubmenuOnHover ? hideSubmenu : undefined}\n    >\n      <UnstyledButton\n        ref={ref}\n        style={[\n          (theme) => {\n            const { colors } = theme;\n            const parsedColor = color ? parseThemeColor({ color, theme }).value : undefined;\n            return {\n              '--mantine-contextmenu-item-button-color': parsedColor ? parsedColor : 'var(--mantine-color-text)',\n              '--mantine-contextmenu-item-button-hover-bg-color-light': parsedColor\n                ? rgba(parsedColor, 0.08)\n                : rgba(colors.gray[4], 0.25),\n              '--mantine-contextmenu-item-button-hover-bg-color-dark': parsedColor\n                ? rgba(parsedColor, 0.15)\n                : rgba(colors.dark[3], 0.25),\n              '--mantine-contextmenu-item-button-pressed-bg-color-light': parsedColor\n                ? rgba(parsedColor, 0.2)\n                : rgba(colors.gray[4], 0.5),\n              '--mantine-contextmenu-item-button-pressed-bg-color-dark': parsedColor\n                ? rgba(parsedColor, 0.3)\n                : rgba(colors.dark[3], 0.5),\n            };\n          },\n          style,\n        ]}\n        className={clsx('mantine-contextmenu-item-button', className)}\n        disabled={disabled}\n        onClick={handleClick}\n      >\n        {icon && (\n          <Box fz={0} mr=\"xs\" mt={-2}>\n            {icon}\n          </Box>\n        )}\n        <div className=\"mantine-contextmenu-item-button-title\">{title}</div>\n        { iconRight ? (\n          <Box fz={0} ml=\"xs\" mt={-2}>\n            {iconRight}\n          </Box>\n        ) : items && (\n          <Box fz={10} mt={-2} ml=\"xs\">\n            â–¶\n          </Box>\n        )}\n      </UnstyledButton>\n      {submenuPosition && <ContextMenu content={items as ContextMenuContent} onHide={onHide} {...submenuPosition} />}\n    </div>\n  );\n}\n", "import { Paper, px, useDirection } from '@mantine/core';\nimport { useResizeObserver } from '@mantine/hooks';\nimport clsx from 'clsx';\nimport { useContext } from 'react';\nimport { ContextMenuDivider } from './ContextMenuDivider';\nimport { ContextMenuItem } from './ContextMenuItem';\nimport { ContextMenuSettingsCtx } from './ContextMenuProvider';\nimport type { ContextMenuContent, ContextMenuOptions } from './types';\nimport { humanize } from './utils';\n\nexport type ContextMenuInstanceOptions = {\n  x: number;\n  y: number;\n  content: ContextMenuContent;\n};\n\nexport type ContextMenuProps = ContextMenuOptions &\n  ContextMenuInstanceOptions & {\n    onHide: () => void;\n  };\n\nexport function ContextMenu({ x, y, content, zIndex, onHide, className, style, classNames, styles }: ContextMenuProps) {\n  const { shadow, borderRadius } = useContext(ContextMenuSettingsCtx);\n  const [paperRef] = useResizeObserver<HTMLDivElement>();\n  const { width, height } = paperRef.current?.getBoundingClientRect() || { width: 0, height: 0 };\n\n  let windowWidth = 0;\n  let windowHeight = 0;\n  if (typeof window !== 'undefined') ({ innerWidth: windowWidth, innerHeight: windowHeight } = window);\n\n  const { dir } = useDirection();\n\n  return (\n    <Paper\n      ref={paperRef}\n      shadow={shadow}\n      radius={borderRadius}\n      className={clsx('mantine-contextmenu', className, classNames?.root)}\n      style={[\n        ({ spacing: { md } }) => {\n          const mdSpacing = px(md) as number;\n          return {\n            zIndex,\n            top: y + height + mdSpacing > windowHeight ? windowHeight - height - mdSpacing : y,\n            left:\n              dir === 'ltr'\n                ? x + width + mdSpacing > windowWidth\n                  ? windowWidth - width - mdSpacing\n                  : x\n                : windowWidth - mdSpacing - (x - width - mdSpacing < 0 ? width + mdSpacing : x),\n          };\n        },\n        style,\n        styles?.root,\n      ]}\n    >\n      {Array.isArray(content)\n        ? content.map(({ key, hidden, className, style, onClick, items, title, ...otherOptions }) =>\n            hidden ? null : onClick || items ? (\n              <ContextMenuItem\n                key={key}\n                className={clsx(classNames?.item, className)}\n                style={[styles?.item, style]}\n                title={title ?? humanize(key)}\n                onClick={onClick}\n                onHide={onHide}\n                items={items}\n                {...otherOptions}\n              />\n            ) : (\n              <ContextMenuDivider\n                key={key}\n                className={clsx(classNames?.divider, className)}\n                style={[styles?.divider, style]}\n              />\n            )\n          )\n        : content(onHide)}\n    </Paper>\n  );\n}\n", "import { createContext, useContext, useState } from 'react';\nimport type { ContextMenuInstanceOptions } from './ContextMenu';\nimport { ContextMenuPortal } from './ContextMenuPortal';\nimport type {\n  ContextMenuOptions,\n  ContextMenuProviderProps,\n  ContextMenuSettings,\n  HideContextMenuFunction,\n  ShowContextMenuFunction,\n  WithRequiredProperty,\n} from './types';\n\nconst DEFAULT_SETTINGS: WithRequiredProperty<ContextMenuSettings, 'shadow' | 'borderRadius' | 'submenuDelay'> = {\n  shadow: 'sm',\n  borderRadius: 'xs',\n  submenuDelay: 500,\n};\n\nexport const ContextMenuSettingsCtx = createContext(DEFAULT_SETTINGS);\nexport const ContextMenuCtx = createContext<{\n  /**\n   * Function that shows the context menu.\n   */\n  showContextMenu: ShowContextMenuFunction;\n\n  /**\n   * Function that hides the context menu.\n   */\n  hideContextMenu: HideContextMenuFunction;\n\n  /**\n   * Boolean indicating whether the context menu is currently visible.\n   */\n  isContextMenuVisible: boolean;\n}>({ showContextMenu: () => () => undefined, hideContextMenu: () => undefined, isContextMenuVisible: false });\n\n/**\n * Provider that allows to show a context menu anywhere in your application.\n * If you wrap your application with this provider, you can use the `useContextMenu` hook\n * anywhere in the component tree to access a function that shows the context menu.\n */\nexport function ContextMenuProvider({\n  zIndex = 9999,\n  shadow = DEFAULT_SETTINGS.shadow,\n  borderRadius = DEFAULT_SETTINGS.borderRadius,\n  submenuDelay = DEFAULT_SETTINGS.submenuDelay,\n  children,\n}: ContextMenuProviderProps) {\n  const [data, setData] = useState<(ContextMenuInstanceOptions & ContextMenuOptions) | null>(null);\n\n  const hideContextMenu = () => {\n    setData(null);\n  };\n\n  const showContextMenu: ShowContextMenuFunction = (content, options) => (e: React.MouseEvent | React.TouchEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const { x, y } =\n      'touches' in e ? { x: e.touches.item(0).clientX, y: e.touches.item(0).clientY } : { x: e.clientX, y: e.clientY };\n\n    setData({\n      x,\n      y,\n      content,\n      zIndex: options?.zIndex || zIndex,\n      className: options?.className,\n      style: options?.style,\n      classNames: options?.classNames,\n      styles: options?.styles,\n    });\n  };\n\n  return (\n    <ContextMenuSettingsCtx.Provider value={{ shadow, borderRadius, submenuDelay }}>\n      <ContextMenuCtx.Provider value={{ showContextMenu, hideContextMenu, isContextMenuVisible: !!data }}>\n        {children}\n        {data && <ContextMenuPortal onHide={hideContextMenu} {...data} />}\n      </ContextMenuCtx.Provider>\n    </ContextMenuSettingsCtx.Provider>\n  );\n}\n\n/**\n * Hook returning functions that show and hide the context menu.\n */\nexport function useContextMenu() {\n  return useContext(ContextMenuCtx);\n}\n", "import { Portal } from '@mantine/core';\nimport { useHotkeys, useWindowEvent } from '@mantine/hooks';\nimport { ContextMenu, type ContextMenuProps } from './ContextMenu';\nimport { ContextMenuOverlay } from './ContextMenuOverlay';\n\nexport type ContextMenuPortalProps = ContextMenuProps & {\n  zIndex?: number;\n};\n\nexport function ContextMenuPortal({ onHide, zIndex, ...otherProps }: ContextMenuPortalProps) {\n  useWindowEvent('resize', onHide);\n  useWindowEvent('scroll', onHide);\n  useHotkeys([['Escape', onHide]]);\n\n  return (\n    <Portal>\n      <ContextMenuOverlay zIndex={zIndex} onHide={onHide}>\n        <ContextMenu {...otherProps} onHide={onHide} />\n      </ContextMenuOverlay>\n    </Portal>\n  );\n}\n", "export type ContextMenuOverlayProps = React.PropsWithChildren<{\n  zIndex: number | undefined;\n  onHide: () => void;\n}>;\n\nexport function ContextMenuOverlay({ zIndex, children, onHide }: ContextMenuOverlayProps) {\n  const handleHide = (e: React.MouseEvent) => {\n    e.preventDefault();\n    onHide();\n  };\n  return (\n    <div className=\"mantine-contextmenu-overlay\" style={{ zIndex }} onClick={handleHide} onContextMenu={handleHide}>\n      {children}\n    </div>\n  );\n}\n", "/**\n * Utility function that returns a humanized version of a string, e.g. \"camelCase\" -> \"Camel Case\"\n */\nexport function humanize(value: string) {\n  const str = value\n    .replace(/([a-z\\d])([A-Z]+)/g, '$1 $2')\n    .replace(/\\W|_/g, ' ')\n    .trim()\n    .toLowerCase();\n  return `${str.charAt(0).toUpperCase()}${str.slice(1)}`;\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_runtime", "ContextMenuDivider", "className", "style", "jsx", "Box", "clsx", "ContextMenuOverlay", "zIndex", "children", "onHide", "handleHide", "e", "ContextMenuPortal", "otherProps", "useWindowEvent", "useHotkeys", "Portal", "ContextMenu", "DEFAULT_SETTINGS", "ContextMenuSettingsCtx", "createContext", "ContextMenuCtx", "ContextMenuProvider", "shadow", "borderRadius", "submenuDelay", "data", "setData", "useState", "hideContextMenu", "showContextMenu", "content", "options", "x", "y", "jsxs", "useContextMenu", "useContext", "humanize", "value", "str", "classNames", "styles", "paperRef", "useResizeObserver", "width", "height", "windowWidth", "windowHeight", "dir", "useDirection", "Paper", "md", "mdSpacing", "px", "key", "hidden", "onClick", "items", "title", "otherOptions", "ContextMenuItem", "icon", "iconRight", "color", "disabled", "ref", "useRef", "hoverAvailable", "useMediaQuery", "submenuPosition", "setSubmenuPosition", "startShowingSubmenu", "stopShowingSubmenu", "useTimeout", "startHidingSubmenu", "stopHidingSubmenu", "showSubmenu", "hideSubmenu", "hasSubmenu", "showSubmenuOnHover", "handleClick", "UnstyledButton", "theme", "colors", "parsedColor", "parseThemeColor", "rgba"]
}
