{"version":3,"file":"chartjs-adapter-dayjs-4.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { _adapters } from 'chart.js';\n\nimport dayjs, { QUnitType } from 'dayjs';\n\nimport type { TimeUnit } from 'chart.js';\n\n// Needed to handle the custom parsing\nimport CustomParseFormat from 'dayjs/plugin/customParseFormat.js';\n\n// Needed to handle quarter format\nimport AdvancedFormat from 'dayjs/plugin/advancedFormat.js';\n\n// Needed to handle adding/subtracting quarter\nimport QuarterOfYear from 'dayjs/plugin/quarterOfYear.js';\n\n// Needed to handle localization format\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat.js';\n\nimport isoWeek from 'dayjs/plugin/isoWeek.js';\n\ndayjs.extend(AdvancedFormat);\n\ndayjs.extend(QuarterOfYear);\n\ndayjs.extend(LocalizedFormat);\n\ndayjs.extend(CustomParseFormat);\n\ndayjs.extend(isoWeek);\n\nconst FORMATS = {\n  datetime: 'MMM D, YYYY, h:mm:ss a',\n  millisecond: 'h:mm:ss.SSS a',\n  second: 'h:mm:ss a',\n  minute: 'h:mm a',\n  hour: 'hA',\n  day: 'MMM D',\n  week: 'll',\n  month: 'MMM YYYY',\n  quarter: '[Q]Q - YYYY',\n  year: 'YYYY',\n};\n\n_adapters._date.override({\n  //_id: 'dayjs', //DEBUG,\n  formats: () => FORMATS,\n  parse: function (value: any, format?: TimeUnit) {\n    const valueType = typeof value;\n\n    if (value === null || valueType === 'undefined') {\n      return null;\n    }\n\n    if (valueType === 'string' && typeof format === 'string') {\n      return dayjs(value, format).isValid() ? dayjs(value, format).valueOf() : null;\n    } else if (!(value instanceof dayjs)) {\n      return dayjs(value).isValid() ? dayjs(value).valueOf() : null;\n    }\n    return null;\n  },\n  format: function (time: any, format: TimeUnit): string {\n    return dayjs(time).format(format);\n  },\n  add: function (time: any, amount: number, unit: QUnitType & TimeUnit) {\n    return dayjs(time).add(amount, unit).valueOf();\n  },\n  diff: function (max: any, min: any, unit: TimeUnit) {\n    return dayjs(max).diff(dayjs(min), unit);\n  },\n  startOf: function (time: any, unit: (TimeUnit & QUnitType) | 'isoWeek', weekday?: number) {\n    if (unit === 'isoWeek') {\n      // Ensure that weekday has a valid format\n      //const formattedWeekday\n\n      const validatedWeekday: number =\n        typeof weekday === 'number' && weekday > 0 && weekday < 7 ? weekday : 1;\n\n      return dayjs(time).isoWeekday(validatedWeekday).startOf('day').valueOf();\n    }\n\n    return dayjs(time).startOf(unit).valueOf();\n  },\n  endOf: function (time: any, unit: TimeUnit & QUnitType) {\n    return dayjs(time).endOf(unit).valueOf();\n  },\n});\n"],"names":["dayjs","extend","AdvancedFormat","QuarterOfYear","LocalizedFormat","CustomParseFormat","isoWeek","FORMATS","datetime","millisecond","second","minute","hour","day","week","month","quarter","year","_adapters","_date","override","formats","parse","value","format","valueType","isValid","valueOf","time","add","amount","unit","diff","max","min","startOf","weekday","validatedWeekday","isoWeekday","endOf"],"mappings":"0WAoBAA,EAAMC,OAAOC,GAEbF,EAAMC,OAAOE,GAEbH,EAAMC,OAAOG,GAEbJ,EAAMC,OAAOI,GAEbL,EAAMC,OAAOK,GAEb,IAAMC,EAAU,CACdC,SAAU,yBACVC,YAAa,gBACbC,OAAQ,YACRC,OAAQ,SACRC,KAAM,KACNC,IAAK,QACLC,KAAM,KACNC,MAAO,WACPC,QAAS,cACTC,KAAM,QAGRC,YAAUC,MAAMC,SAAS,CAEvBC,QAAS,WAAA,OAAMd,GACfe,MAAO,SAAUC,EAAYC,GAC3B,IAAMC,SAAmBF,EAEzB,OAAc,OAAVA,GAAgC,cAAdE,EACb,KAGS,WAAdA,GAA4C,iBAAXD,EAC5BxB,EAAMuB,EAAOC,GAAQE,UAAY1B,EAAMuB,EAAOC,GAAQG,UAAY,KAC9DJ,aAAiBvB,EAGvB,KAFEA,EAAMuB,GAAOG,UAAY1B,EAAMuB,GAAOI,UAAY,MAI7DH,OAAQ,SAAUI,EAAWJ,GAC3B,OAAOxB,EAAM4B,GAAMJ,OAAOA,IAE5BK,IAAK,SAAUD,EAAWE,EAAgBC,GACxC,OAAO/B,EAAM4B,GAAMC,IAAIC,EAAQC,GAAMJ,WAEvCK,KAAM,SAAUC,EAAUC,EAAUH,GAClC,OAAO/B,EAAMiC,GAAKD,KAAKhC,EAAMkC,GAAMH,IAErCI,QAAS,SAAUP,EAAWG,EAA0CK,GACtE,GAAa,YAATL,EAAoB,CAItB,IAAMM,EACe,iBAAZD,GAAwBA,EAAU,GAAKA,EAAU,EAAIA,EAAU,EAExE,OAAOpC,EAAM4B,GAAMU,WAAWD,GAAkBF,QAAQ,OAAOR,UAGjE,OAAO3B,EAAM4B,GAAMO,QAAQJ,GAAMJ,WAEnCY,MAAO,SAAUX,EAAWG,GAC1B,OAAO/B,EAAM4B,GAAMW,MAAMR,GAAMJ"}